Wav2Vec2ForSequenceClassification(
  (wav2vec2): Wav2Vec2Model(
    (feature_extractor): Wav2Vec2FeatureEncoder(
      (conv_layers): ModuleList(
        (0): Wav2Vec2LayerNormConvLayer(
          (conv): Conv1d(1, 512, kernel_size=(10,), stride=(5,))
          (layer_norm): LayerNorm((512,), eps=1e-05, elementwise_affine=True)
          (activation): GELUActivation()
        )
        (1): Wav2Vec2LayerNormConvLayer(
          (conv): Conv1d(512, 512, kernel_size=(3,), stride=(2,))
          (layer_norm): LayerNorm((512,), eps=1e-05, elementwise_affine=True)
          (activation): GELUActivation()
        )
        (2): Wav2Vec2LayerNormConvLayer(
          (conv): Conv1d(512, 512, kernel_size=(3,), stride=(2,))
          (layer_norm): LayerNorm((512,), eps=1e-05, elementwise_affine=True)
          (activation): GELUActivation()
        )
        (3): Wav2Vec2LayerNormConvLayer(
          (conv): Conv1d(512, 512, kernel_size=(3,), stride=(2,))
          (layer_norm): LayerNorm((512,), eps=1e-05, elementwise_affine=True)
          (activation): GELUActivation()
        )
        (4): Wav2Vec2LayerNormConvLayer(
          (conv): Conv1d(512, 512, kernel_size=(3,), stride=(2,))
          (layer_norm): LayerNorm((512,), eps=1e-05, elementwise_affine=True)
          (activation): GELUActivation()
        )
        (5): Wav2Vec2LayerNormConvLayer(
          (conv): Conv1d(512, 512, kernel_size=(2,), stride=(2,))
          (layer_norm): LayerNorm((512,), eps=1e-05, elementwise_affine=True)
          (activation): GELUActivation()
        )
        (6): Wav2Vec2LayerNormConvLayer(
          (conv): Conv1d(512, 512, kernel_size=(2,), stride=(2,))
          (layer_norm): LayerNorm((512,), eps=1e-05, elementwise_affine=True)
          (activation): GELUActivation()
        )
      )
    )
    (feature_projection): Wav2Vec2FeatureProjection(
      (layer_norm): LayerNorm((512,), eps=1e-05, elementwise_affine=True)
      (projection): Linear(in_features=512, out_features=1024, bias=True)
      (dropout): Dropout(p=0.05, inplace=False)
    )
    (encoder): Wav2Vec2EncoderStableLayerNorm(
      (pos_conv_embed): Wav2Vec2PositionalConvEmbedding(
        (conv): Conv1d(1024, 1024, kernel_size=(128,), stride=(1,), padding=(64,), groups=16)
        (padding): Wav2Vec2SamePadLayer()
        (activation): GELUActivation()
      )
      (layer_norm): LayerNorm((1024,), eps=1e-05, elementwise_affine=True)
      (dropout): Dropout(p=0.05, inplace=False)
      (layers): ModuleList(
        (0): Wav2Vec2EncoderLayerStableLayerNorm(
          (attention): Wav2Vec2Attention(
            (k_proj): Linear(in_features=1024, out_features=1024, bias=True)
            (v_proj): Linear(in_features=1024, out_features=1024, bias=True)
            (q_proj): Linear(in_features=1024, out_features=1024, bias=True)
            (out_proj): Linear(in_features=1024, out_features=1024, bias=True)
          )
          (dropout): Dropout(p=0.05, inplace=False)
          (layer_norm): LayerNorm((1024,), eps=1e-05, elementwise_affine=True)
          (feed_forward): Wav2Vec2FeedForward(
            (intermediate_dropout): Dropout(p=0.05, inplace=False)
            (intermediate_dense): Linear(in_features=1024, out_features=4096, bias=True)
            (intermediate_act_fn): GELUActivation()
            (output_dense): Linear(in_features=4096, out_features=1024, bias=True)
            (output_dropout): Dropout(p=0.05, inplace=False)
          )
          (final_layer_norm): LayerNorm((1024,), eps=1e-05, elementwise_affine=True)
          (adapterblock): AdapterBlock(
            (layer_norm1): LayerNorm((1024,), eps=1e-05, elementwise_affine=True)
            (conv1): Conv1d(1024, 512, kernel_size=(3,), stride=(1,), padding=same, groups=512, bias=False)
            (relu1): ReLU(inplace=True)
            (conv2): Conv1d(512, 512, kernel_size=(5,), stride=(1,), padding=same, groups=512, bias=False)
            (conv3): Conv1d(512, 1024, kernel_size=(3,), stride=(1,), padding=same, groups=512, bias=False)
            (se3): SELayer(
              (avg_pool): AdaptiveAvgPool1d(output_size=1)
              (fc): Sequential(
                (0): Linear(in_features=1024, out_features=64, bias=False)
                (1): ReLU(inplace=True)
                (2): Linear(in_features=64, out_features=1024, bias=False)
                (3): Sigmoid()
              )
            )
          )
        )
        (1): Wav2Vec2EncoderLayerStableLayerNorm(
          (attention): Wav2Vec2Attention(
            (k_proj): Linear(in_features=1024, out_features=1024, bias=True)
            (v_proj): Linear(in_features=1024, out_features=1024, bias=True)
            (q_proj): Linear(in_features=1024, out_features=1024, bias=True)
            (out_proj): Linear(in_features=1024, out_features=1024, bias=True)
          )
          (dropout): Dropout(p=0.05, inplace=False)
          (layer_norm): LayerNorm((1024,), eps=1e-05, elementwise_affine=True)
          (feed_forward): Wav2Vec2FeedForward(
            (intermediate_dropout): Dropout(p=0.05, inplace=False)
            (intermediate_dense): Linear(in_features=1024, out_features=4096, bias=True)
            (intermediate_act_fn): GELUActivation()
            (output_dense): Linear(in_features=4096, out_features=1024, bias=True)
            (output_dropout): Dropout(p=0.05, inplace=False)
          )
          (final_layer_norm): LayerNorm((1024,), eps=1e-05, elementwise_affine=True)
          (adapterblock): AdapterBlock(
            (layer_norm1): LayerNorm((1024,), eps=1e-05, elementwise_affine=True)
            (conv1): Conv1d(1024, 512, kernel_size=(3,), stride=(1,), padding=same, groups=512, bias=False)
            (relu1): ReLU(inplace=True)
            (conv2): Conv1d(512, 512, kernel_size=(5,), stride=(1,), padding=same, groups=512, bias=False)
            (conv3): Conv1d(512, 1024, kernel_size=(3,), stride=(1,), padding=same, groups=512, bias=False)
            (se3): SELayer(
              (avg_pool): AdaptiveAvgPool1d(output_size=1)
              (fc): Sequential(
                (0): Linear(in_features=1024, out_features=64, bias=False)
                (1): ReLU(inplace=True)
                (2): Linear(in_features=64, out_features=1024, bias=False)
                (3): Sigmoid()
              )
            )
          )
        )
        (2): Wav2Vec2EncoderLayerStableLayerNorm(
          (attention): Wav2Vec2Attention(
            (k_proj): Linear(in_features=1024, out_features=1024, bias=True)
            (v_proj): Linear(in_features=1024, out_features=1024, bias=True)
            (q_proj): Linear(in_features=1024, out_features=1024, bias=True)
            (out_proj): Linear(in_features=1024, out_features=1024, bias=True)
          )
          (dropout): Dropout(p=0.05, inplace=False)
          (layer_norm): LayerNorm((1024,), eps=1e-05, elementwise_affine=True)
          (feed_forward): Wav2Vec2FeedForward(
            (intermediate_dropout): Dropout(p=0.05, inplace=False)
            (intermediate_dense): Linear(in_features=1024, out_features=4096, bias=True)
            (intermediate_act_fn): GELUActivation()
            (output_dense): Linear(in_features=4096, out_features=1024, bias=True)
            (output_dropout): Dropout(p=0.05, inplace=False)
          )
          (final_layer_norm): LayerNorm((1024,), eps=1e-05, elementwise_affine=True)
          (adapterblock): AdapterBlock(
            (layer_norm1): LayerNorm((1024,), eps=1e-05, elementwise_affine=True)
            (conv1): Conv1d(1024, 512, kernel_size=(3,), stride=(1,), padding=same, groups=512, bias=False)
            (relu1): ReLU(inplace=True)
            (conv2): Conv1d(512, 512, kernel_size=(5,), stride=(1,), padding=same, groups=512, bias=False)
            (conv3): Conv1d(512, 1024, kernel_size=(3,), stride=(1,), padding=same, groups=512, bias=False)
            (se3): SELayer(
              (avg_pool): AdaptiveAvgPool1d(output_size=1)
              (fc): Sequential(
                (0): Linear(in_features=1024, out_features=64, bias=False)
                (1): ReLU(inplace=True)
                (2): Linear(in_features=64, out_features=1024, bias=False)
                (3): Sigmoid()
              )
            )
          )
        )
        (3): Wav2Vec2EncoderLayerStableLayerNorm(
          (attention): Wav2Vec2Attention(
            (k_proj): Linear(in_features=1024, out_features=1024, bias=True)
            (v_proj): Linear(in_features=1024, out_features=1024, bias=True)
            (q_proj): Linear(in_features=1024, out_features=1024, bias=True)
            (out_proj): Linear(in_features=1024, out_features=1024, bias=True)
          )
          (dropout): Dropout(p=0.05, inplace=False)
          (layer_norm): LayerNorm((1024,), eps=1e-05, elementwise_affine=True)
          (feed_forward): Wav2Vec2FeedForward(
            (intermediate_dropout): Dropout(p=0.05, inplace=False)
            (intermediate_dense): Linear(in_features=1024, out_features=4096, bias=True)
            (intermediate_act_fn): GELUActivation()
            (output_dense): Linear(in_features=4096, out_features=1024, bias=True)
            (output_dropout): Dropout(p=0.05, inplace=False)
          )
          (final_layer_norm): LayerNorm((1024,), eps=1e-05, elementwise_affine=True)
          (adapterblock): AdapterBlock(
            (layer_norm1): LayerNorm((1024,), eps=1e-05, elementwise_affine=True)
            (conv1): Conv1d(1024, 512, kernel_size=(3,), stride=(1,), padding=same, groups=512, bias=False)
            (relu1): ReLU(inplace=True)
            (conv2): Conv1d(512, 512, kernel_size=(5,), stride=(1,), padding=same, groups=512, bias=False)
            (conv3): Conv1d(512, 1024, kernel_size=(3,), stride=(1,), padding=same, groups=512, bias=False)
            (se3): SELayer(
              (avg_pool): AdaptiveAvgPool1d(output_size=1)
              (fc): Sequential(
                (0): Linear(in_features=1024, out_features=64, bias=False)
                (1): ReLU(inplace=True)
                (2): Linear(in_features=64, out_features=1024, bias=False)
                (3): Sigmoid()
              )
            )
          )
        )
        (4): Wav2Vec2EncoderLayerStableLayerNorm(
          (attention): Wav2Vec2Attention(
            (k_proj): Linear(in_features=1024, out_features=1024, bias=True)
            (v_proj): Linear(in_features=1024, out_features=1024, bias=True)
            (q_proj): Linear(in_features=1024, out_features=1024, bias=True)
            (out_proj): Linear(in_features=1024, out_features=1024, bias=True)
          )
          (dropout): Dropout(p=0.05, inplace=False)
          (layer_norm): LayerNorm((1024,), eps=1e-05, elementwise_affine=True)
          (feed_forward): Wav2Vec2FeedForward(
            (intermediate_dropout): Dropout(p=0.05, inplace=False)
            (intermediate_dense): Linear(in_features=1024, out_features=4096, bias=True)
            (intermediate_act_fn): GELUActivation()
            (output_dense): Linear(in_features=4096, out_features=1024, bias=True)
            (output_dropout): Dropout(p=0.05, inplace=False)
          )
          (final_layer_norm): LayerNorm((1024,), eps=1e-05, elementwise_affine=True)
          (adapterblock): AdapterBlock(
            (layer_norm1): LayerNorm((1024,), eps=1e-05, elementwise_affine=True)
            (conv1): Conv1d(1024, 512, kernel_size=(3,), stride=(1,), padding=same, groups=512, bias=False)
            (relu1): ReLU(inplace=True)
            (conv2): Conv1d(512, 512, kernel_size=(5,), stride=(1,), padding=same, groups=512, bias=False)
            (conv3): Conv1d(512, 1024, kernel_size=(3,), stride=(1,), padding=same, groups=512, bias=False)
            (se3): SELayer(
              (avg_pool): AdaptiveAvgPool1d(output_size=1)
              (fc): Sequential(
                (0): Linear(in_features=1024, out_features=64, bias=False)
                (1): ReLU(inplace=True)
                (2): Linear(in_features=64, out_features=1024, bias=False)
                (3): Sigmoid()
              )
            )
          )
        )
        (5): Wav2Vec2EncoderLayerStableLayerNorm(
          (attention): Wav2Vec2Attention(
            (k_proj): Linear(in_features=1024, out_features=1024, bias=True)
            (v_proj): Linear(in_features=1024, out_features=1024, bias=True)
            (q_proj): Linear(in_features=1024, out_features=1024, bias=True)
            (out_proj): Linear(in_features=1024, out_features=1024, bias=True)
          )
          (dropout): Dropout(p=0.05, inplace=False)
          (layer_norm): LayerNorm((1024,), eps=1e-05, elementwise_affine=True)
          (feed_forward): Wav2Vec2FeedForward(
            (intermediate_dropout): Dropout(p=0.05, inplace=False)
            (intermediate_dense): Linear(in_features=1024, out_features=4096, bias=True)
            (intermediate_act_fn): GELUActivation()
            (output_dense): Linear(in_features=4096, out_features=1024, bias=True)
            (output_dropout): Dropout(p=0.05, inplace=False)
          )
          (final_layer_norm): LayerNorm((1024,), eps=1e-05, elementwise_affine=True)
          (adapterblock): AdapterBlock(
            (layer_norm1): LayerNorm((1024,), eps=1e-05, elementwise_affine=True)
            (conv1): Conv1d(1024, 512, kernel_size=(3,), stride=(1,), padding=same, groups=512, bias=False)
            (relu1): ReLU(inplace=True)
            (conv2): Conv1d(512, 512, kernel_size=(5,), stride=(1,), padding=same, groups=512, bias=False)
            (conv3): Conv1d(512, 1024, kernel_size=(3,), stride=(1,), padding=same, groups=512, bias=False)
            (se3): SELayer(
              (avg_pool): AdaptiveAvgPool1d(output_size=1)
              (fc): Sequential(
                (0): Linear(in_features=1024, out_features=64, bias=False)
                (1): ReLU(inplace=True)
                (2): Linear(in_features=64, out_features=1024, bias=False)
                (3): Sigmoid()
              )
            )
          )
        )
        (6): Wav2Vec2EncoderLayerStableLayerNorm(
          (attention): Wav2Vec2Attention(
            (k_proj): Linear(in_features=1024, out_features=1024, bias=True)
            (v_proj): Linear(in_features=1024, out_features=1024, bias=True)
            (q_proj): Linear(in_features=1024, out_features=1024, bias=True)
            (out_proj): Linear(in_features=1024, out_features=1024, bias=True)
          )
          (dropout): Dropout(p=0.05, inplace=False)
          (layer_norm): LayerNorm((1024,), eps=1e-05, elementwise_affine=True)
          (feed_forward): Wav2Vec2FeedForward(
            (intermediate_dropout): Dropout(p=0.05, inplace=False)
            (intermediate_dense): Linear(in_features=1024, out_features=4096, bias=True)
            (intermediate_act_fn): GELUActivation()
            (output_dense): Linear(in_features=4096, out_features=1024, bias=True)
            (output_dropout): Dropout(p=0.05, inplace=False)
          )
          (final_layer_norm): LayerNorm((1024,), eps=1e-05, elementwise_affine=True)
          (adapterblock): AdapterBlock(
            (layer_norm1): LayerNorm((1024,), eps=1e-05, elementwise_affine=True)
            (conv1): Conv1d(1024, 512, kernel_size=(3,), stride=(1,), padding=same, groups=512, bias=False)
            (relu1): ReLU(inplace=True)
            (conv2): Conv1d(512, 512, kernel_size=(5,), stride=(1,), padding=same, groups=512, bias=False)
            (conv3): Conv1d(512, 1024, kernel_size=(3,), stride=(1,), padding=same, groups=512, bias=False)
            (se3): SELayer(
              (avg_pool): AdaptiveAvgPool1d(output_size=1)
              (fc): Sequential(
                (0): Linear(in_features=1024, out_features=64, bias=False)
                (1): ReLU(inplace=True)
                (2): Linear(in_features=64, out_features=1024, bias=False)
                (3): Sigmoid()
              )
            )
          )
        )
        (7): Wav2Vec2EncoderLayerStableLayerNorm(
          (attention): Wav2Vec2Attention(
            (k_proj): Linear(in_features=1024, out_features=1024, bias=True)
            (v_proj): Linear(in_features=1024, out_features=1024, bias=True)
            (q_proj): Linear(in_features=1024, out_features=1024, bias=True)
            (out_proj): Linear(in_features=1024, out_features=1024, bias=True)
          )
          (dropout): Dropout(p=0.05, inplace=False)
          (layer_norm): LayerNorm((1024,), eps=1e-05, elementwise_affine=True)
          (feed_forward): Wav2Vec2FeedForward(
            (intermediate_dropout): Dropout(p=0.05, inplace=False)
            (intermediate_dense): Linear(in_features=1024, out_features=4096, bias=True)
            (intermediate_act_fn): GELUActivation()
            (output_dense): Linear(in_features=4096, out_features=1024, bias=True)
            (output_dropout): Dropout(p=0.05, inplace=False)
          )
          (final_layer_norm): LayerNorm((1024,), eps=1e-05, elementwise_affine=True)
          (adapterblock): AdapterBlock(
            (layer_norm1): LayerNorm((1024,), eps=1e-05, elementwise_affine=True)
            (conv1): Conv1d(1024, 512, kernel_size=(3,), stride=(1,), padding=same, groups=512, bias=False)
            (relu1): ReLU(inplace=True)
            (conv2): Conv1d(512, 512, kernel_size=(5,), stride=(1,), padding=same, groups=512, bias=False)
            (conv3): Conv1d(512, 1024, kernel_size=(3,), stride=(1,), padding=same, groups=512, bias=False)
            (se3): SELayer(
              (avg_pool): AdaptiveAvgPool1d(output_size=1)
              (fc): Sequential(
                (0): Linear(in_features=1024, out_features=64, bias=False)
                (1): ReLU(inplace=True)
                (2): Linear(in_features=64, out_features=1024, bias=False)
                (3): Sigmoid()
              )
            )
          )
        )
        (8): Wav2Vec2EncoderLayerStableLayerNorm(
          (attention): Wav2Vec2Attention(
            (k_proj): Linear(in_features=1024, out_features=1024, bias=True)
            (v_proj): Linear(in_features=1024, out_features=1024, bias=True)
            (q_proj): Linear(in_features=1024, out_features=1024, bias=True)
            (out_proj): Linear(in_features=1024, out_features=1024, bias=True)
          )
          (dropout): Dropout(p=0.05, inplace=False)
          (layer_norm): LayerNorm((1024,), eps=1e-05, elementwise_affine=True)
          (feed_forward): Wav2Vec2FeedForward(
            (intermediate_dropout): Dropout(p=0.05, inplace=False)
            (intermediate_dense): Linear(in_features=1024, out_features=4096, bias=True)
            (intermediate_act_fn): GELUActivation()
            (output_dense): Linear(in_features=4096, out_features=1024, bias=True)
            (output_dropout): Dropout(p=0.05, inplace=False)
          )
          (final_layer_norm): LayerNorm((1024,), eps=1e-05, elementwise_affine=True)
          (adapterblock): AdapterBlock(
            (layer_norm1): LayerNorm((1024,), eps=1e-05, elementwise_affine=True)
            (conv1): Conv1d(1024, 512, kernel_size=(3,), stride=(1,), padding=same, groups=512, bias=False)
            (relu1): ReLU(inplace=True)
            (conv2): Conv1d(512, 512, kernel_size=(5,), stride=(1,), padding=same, groups=512, bias=False)
            (conv3): Conv1d(512, 1024, kernel_size=(3,), stride=(1,), padding=same, groups=512, bias=False)
            (se3): SELayer(
              (avg_pool): AdaptiveAvgPool1d(output_size=1)
              (fc): Sequential(
                (0): Linear(in_features=1024, out_features=64, bias=False)
                (1): ReLU(inplace=True)
                (2): Linear(in_features=64, out_features=1024, bias=False)
                (3): Sigmoid()
              )
            )
          )
        )
        (9): Wav2Vec2EncoderLayerStableLayerNorm(
          (attention): Wav2Vec2Attention(
            (k_proj): Linear(in_features=1024, out_features=1024, bias=True)
            (v_proj): Linear(in_features=1024, out_features=1024, bias=True)
            (q_proj): Linear(in_features=1024, out_features=1024, bias=True)
            (out_proj): Linear(in_features=1024, out_features=1024, bias=True)
          )
          (dropout): Dropout(p=0.05, inplace=False)
          (layer_norm): LayerNorm((1024,), eps=1e-05, elementwise_affine=True)
          (feed_forward): Wav2Vec2FeedForward(
            (intermediate_dropout): Dropout(p=0.05, inplace=False)
            (intermediate_dense): Linear(in_features=1024, out_features=4096, bias=True)
            (intermediate_act_fn): GELUActivation()
            (output_dense): Linear(in_features=4096, out_features=1024, bias=True)
            (output_dropout): Dropout(p=0.05, inplace=False)
          )
          (final_layer_norm): LayerNorm((1024,), eps=1e-05, elementwise_affine=True)
          (adapterblock): AdapterBlock(
            (layer_norm1): LayerNorm((1024,), eps=1e-05, elementwise_affine=True)
            (conv1): Conv1d(1024, 512, kernel_size=(3,), stride=(1,), padding=same, groups=512, bias=False)
            (relu1): ReLU(inplace=True)
            (conv2): Conv1d(512, 512, kernel_size=(5,), stride=(1,), padding=same, groups=512, bias=False)
            (conv3): Conv1d(512, 1024, kernel_size=(3,), stride=(1,), padding=same, groups=512, bias=False)
            (se3): SELayer(
              (avg_pool): AdaptiveAvgPool1d(output_size=1)
              (fc): Sequential(
                (0): Linear(in_features=1024, out_features=64, bias=False)
                (1): ReLU(inplace=True)
                (2): Linear(in_features=64, out_features=1024, bias=False)
                (3): Sigmoid()
              )
            )
          )
        )
        (10): Wav2Vec2EncoderLayerStableLayerNorm(
          (attention): Wav2Vec2Attention(
            (k_proj): Linear(in_features=1024, out_features=1024, bias=True)
            (v_proj): Linear(in_features=1024, out_features=1024, bias=True)
            (q_proj): Linear(in_features=1024, out_features=1024, bias=True)
            (out_proj): Linear(in_features=1024, out_features=1024, bias=True)
          )
          (dropout): Dropout(p=0.05, inplace=False)
          (layer_norm): LayerNorm((1024,), eps=1e-05, elementwise_affine=True)
          (feed_forward): Wav2Vec2FeedForward(
            (intermediate_dropout): Dropout(p=0.05, inplace=False)
            (intermediate_dense): Linear(in_features=1024, out_features=4096, bias=True)
            (intermediate_act_fn): GELUActivation()
            (output_dense): Linear(in_features=4096, out_features=1024, bias=True)
            (output_dropout): Dropout(p=0.05, inplace=False)
          )
          (final_layer_norm): LayerNorm((1024,), eps=1e-05, elementwise_affine=True)
          (adapterblock): AdapterBlock(
            (layer_norm1): LayerNorm((1024,), eps=1e-05, elementwise_affine=True)
            (conv1): Conv1d(1024, 512, kernel_size=(3,), stride=(1,), padding=same, groups=512, bias=False)
            (relu1): ReLU(inplace=True)
            (conv2): Conv1d(512, 512, kernel_size=(5,), stride=(1,), padding=same, groups=512, bias=False)
            (conv3): Conv1d(512, 1024, kernel_size=(3,), stride=(1,), padding=same, groups=512, bias=False)
            (se3): SELayer(
              (avg_pool): AdaptiveAvgPool1d(output_size=1)
              (fc): Sequential(
                (0): Linear(in_features=1024, out_features=64, bias=False)
                (1): ReLU(inplace=True)
                (2): Linear(in_features=64, out_features=1024, bias=False)
                (3): Sigmoid()
              )
            )
          )
        )
        (11): Wav2Vec2EncoderLayerStableLayerNorm(
          (attention): Wav2Vec2Attention(
            (k_proj): Linear(in_features=1024, out_features=1024, bias=True)
            (v_proj): Linear(in_features=1024, out_features=1024, bias=True)
            (q_proj): Linear(in_features=1024, out_features=1024, bias=True)
            (out_proj): Linear(in_features=1024, out_features=1024, bias=True)
          )
          (dropout): Dropout(p=0.05, inplace=False)
          (layer_norm): LayerNorm((1024,), eps=1e-05, elementwise_affine=True)
          (feed_forward): Wav2Vec2FeedForward(
            (intermediate_dropout): Dropout(p=0.05, inplace=False)
            (intermediate_dense): Linear(in_features=1024, out_features=4096, bias=True)
            (intermediate_act_fn): GELUActivation()
            (output_dense): Linear(in_features=4096, out_features=1024, bias=True)
            (output_dropout): Dropout(p=0.05, inplace=False)
          )
          (final_layer_norm): LayerNorm((1024,), eps=1e-05, elementwise_affine=True)
          (adapterblock): AdapterBlock(
            (layer_norm1): LayerNorm((1024,), eps=1e-05, elementwise_affine=True)
            (conv1): Conv1d(1024, 512, kernel_size=(3,), stride=(1,), padding=same, groups=512, bias=False)
            (relu1): ReLU(inplace=True)
            (conv2): Conv1d(512, 512, kernel_size=(5,), stride=(1,), padding=same, groups=512, bias=False)
            (conv3): Conv1d(512, 1024, kernel_size=(3,), stride=(1,), padding=same, groups=512, bias=False)
            (se3): SELayer(
              (avg_pool): AdaptiveAvgPool1d(output_size=1)
              (fc): Sequential(
                (0): Linear(in_features=1024, out_features=64, bias=False)
                (1): ReLU(inplace=True)
                (2): Linear(in_features=64, out_features=1024, bias=False)
                (3): Sigmoid()
              )
            )
          )
        )
        (12): Wav2Vec2EncoderLayerStableLayerNorm(
          (attention): Wav2Vec2Attention(
            (k_proj): Linear(in_features=1024, out_features=1024, bias=True)
            (v_proj): Linear(in_features=1024, out_features=1024, bias=True)
            (q_proj): Linear(in_features=1024, out_features=1024, bias=True)
            (out_proj): Linear(in_features=1024, out_features=1024, bias=True)
          )
          (dropout): Dropout(p=0.05, inplace=False)
          (layer_norm): LayerNorm((1024,), eps=1e-05, elementwise_affine=True)
          (feed_forward): Wav2Vec2FeedForward(
            (intermediate_dropout): Dropout(p=0.05, inplace=False)
            (intermediate_dense): Linear(in_features=1024, out_features=4096, bias=True)
            (intermediate_act_fn): GELUActivation()
            (output_dense): Linear(in_features=4096, out_features=1024, bias=True)
            (output_dropout): Dropout(p=0.05, inplace=False)
          )
          (final_layer_norm): LayerNorm((1024,), eps=1e-05, elementwise_affine=True)
          (adapterblock): AdapterBlock(
            (layer_norm1): LayerNorm((1024,), eps=1e-05, elementwise_affine=True)
            (conv1): Conv1d(1024, 512, kernel_size=(3,), stride=(1,), padding=same, groups=512, bias=False)
            (relu1): ReLU(inplace=True)
            (conv2): Conv1d(512, 512, kernel_size=(5,), stride=(1,), padding=same, groups=512, bias=False)
            (conv3): Conv1d(512, 1024, kernel_size=(3,), stride=(1,), padding=same, groups=512, bias=False)
            (se3): SELayer(
              (avg_pool): AdaptiveAvgPool1d(output_size=1)
              (fc): Sequential(
                (0): Linear(in_features=1024, out_features=64, bias=False)
                (1): ReLU(inplace=True)
                (2): Linear(in_features=64, out_features=1024, bias=False)
                (3): Sigmoid()
              )
            )
          )
        )
        (13): Wav2Vec2EncoderLayerStableLayerNorm(
          (attention): Wav2Vec2Attention(
            (k_proj): Linear(in_features=1024, out_features=1024, bias=True)
            (v_proj): Linear(in_features=1024, out_features=1024, bias=True)
            (q_proj): Linear(in_features=1024, out_features=1024, bias=True)
            (out_proj): Linear(in_features=1024, out_features=1024, bias=True)
          )
          (dropout): Dropout(p=0.05, inplace=False)
          (layer_norm): LayerNorm((1024,), eps=1e-05, elementwise_affine=True)
          (feed_forward): Wav2Vec2FeedForward(
            (intermediate_dropout): Dropout(p=0.05, inplace=False)
            (intermediate_dense): Linear(in_features=1024, out_features=4096, bias=True)
            (intermediate_act_fn): GELUActivation()
            (output_dense): Linear(in_features=4096, out_features=1024, bias=True)
            (output_dropout): Dropout(p=0.05, inplace=False)
          )
          (final_layer_norm): LayerNorm((1024,), eps=1e-05, elementwise_affine=True)
          (adapterblock): AdapterBlock(
            (layer_norm1): LayerNorm((1024,), eps=1e-05, elementwise_affine=True)
            (conv1): Conv1d(1024, 512, kernel_size=(3,), stride=(1,), padding=same, groups=512, bias=False)
            (relu1): ReLU(inplace=True)
            (conv2): Conv1d(512, 512, kernel_size=(5,), stride=(1,), padding=same, groups=512, bias=False)
            (conv3): Conv1d(512, 1024, kernel_size=(3,), stride=(1,), padding=same, groups=512, bias=False)
            (se3): SELayer(
              (avg_pool): AdaptiveAvgPool1d(output_size=1)
              (fc): Sequential(
                (0): Linear(in_features=1024, out_features=64, bias=False)
                (1): ReLU(inplace=True)
                (2): Linear(in_features=64, out_features=1024, bias=False)
                (3): Sigmoid()
              )
            )
          )
        )
        (14): Wav2Vec2EncoderLayerStableLayerNorm(
          (attention): Wav2Vec2Attention(
            (k_proj): Linear(in_features=1024, out_features=1024, bias=True)
            (v_proj): Linear(in_features=1024, out_features=1024, bias=True)
            (q_proj): Linear(in_features=1024, out_features=1024, bias=True)
            (out_proj): Linear(in_features=1024, out_features=1024, bias=True)
          )
          (dropout): Dropout(p=0.05, inplace=False)
          (layer_norm): LayerNorm((1024,), eps=1e-05, elementwise_affine=True)
          (feed_forward): Wav2Vec2FeedForward(
            (intermediate_dropout): Dropout(p=0.05, inplace=False)
            (intermediate_dense): Linear(in_features=1024, out_features=4096, bias=True)
            (intermediate_act_fn): GELUActivation()
            (output_dense): Linear(in_features=4096, out_features=1024, bias=True)
            (output_dropout): Dropout(p=0.05, inplace=False)
          )
          (final_layer_norm): LayerNorm((1024,), eps=1e-05, elementwise_affine=True)
          (adapterblock): AdapterBlock(
            (layer_norm1): LayerNorm((1024,), eps=1e-05, elementwise_affine=True)
            (conv1): Conv1d(1024, 512, kernel_size=(3,), stride=(1,), padding=same, groups=512, bias=False)
            (relu1): ReLU(inplace=True)
            (conv2): Conv1d(512, 512, kernel_size=(5,), stride=(1,), padding=same, groups=512, bias=False)
            (conv3): Conv1d(512, 1024, kernel_size=(3,), stride=(1,), padding=same, groups=512, bias=False)
            (se3): SELayer(
              (avg_pool): AdaptiveAvgPool1d(output_size=1)
              (fc): Sequential(
                (0): Linear(in_features=1024, out_features=64, bias=False)
                (1): ReLU(inplace=True)
                (2): Linear(in_features=64, out_features=1024, bias=False)
                (3): Sigmoid()
              )
            )
          )
        )
        (15): Wav2Vec2EncoderLayerStableLayerNorm(
          (attention): Wav2Vec2Attention(
            (k_proj): Linear(in_features=1024, out_features=1024, bias=True)
            (v_proj): Linear(in_features=1024, out_features=1024, bias=True)
            (q_proj): Linear(in_features=1024, out_features=1024, bias=True)
            (out_proj): Linear(in_features=1024, out_features=1024, bias=True)
          )
          (dropout): Dropout(p=0.05, inplace=False)
          (layer_norm): LayerNorm((1024,), eps=1e-05, elementwise_affine=True)
          (feed_forward): Wav2Vec2FeedForward(
            (intermediate_dropout): Dropout(p=0.05, inplace=False)
            (intermediate_dense): Linear(in_features=1024, out_features=4096, bias=True)
            (intermediate_act_fn): GELUActivation()
            (output_dense): Linear(in_features=4096, out_features=1024, bias=True)
            (output_dropout): Dropout(p=0.05, inplace=False)
          )
          (final_layer_norm): LayerNorm((1024,), eps=1e-05, elementwise_affine=True)
          (adapterblock): AdapterBlock(
            (layer_norm1): LayerNorm((1024,), eps=1e-05, elementwise_affine=True)
            (conv1): Conv1d(1024, 512, kernel_size=(3,), stride=(1,), padding=same, groups=512, bias=False)
            (relu1): ReLU(inplace=True)
            (conv2): Conv1d(512, 512, kernel_size=(5,), stride=(1,), padding=same, groups=512, bias=False)
            (conv3): Conv1d(512, 1024, kernel_size=(3,), stride=(1,), padding=same, groups=512, bias=False)
            (se3): SELayer(
              (avg_pool): AdaptiveAvgPool1d(output_size=1)
              (fc): Sequential(
                (0): Linear(in_features=1024, out_features=64, bias=False)
                (1): ReLU(inplace=True)
                (2): Linear(in_features=64, out_features=1024, bias=False)
                (3): Sigmoid()
              )
            )
          )
        )
        (16): Wav2Vec2EncoderLayerStableLayerNorm(
          (attention): Wav2Vec2Attention(
            (k_proj): Linear(in_features=1024, out_features=1024, bias=True)
            (v_proj): Linear(in_features=1024, out_features=1024, bias=True)
            (q_proj): Linear(in_features=1024, out_features=1024, bias=True)
            (out_proj): Linear(in_features=1024, out_features=1024, bias=True)
          )
          (dropout): Dropout(p=0.05, inplace=False)
          (layer_norm): LayerNorm((1024,), eps=1e-05, elementwise_affine=True)
          (feed_forward): Wav2Vec2FeedForward(
            (intermediate_dropout): Dropout(p=0.05, inplace=False)
            (intermediate_dense): Linear(in_features=1024, out_features=4096, bias=True)
            (intermediate_act_fn): GELUActivation()
            (output_dense): Linear(in_features=4096, out_features=1024, bias=True)
            (output_dropout): Dropout(p=0.05, inplace=False)
          )
          (final_layer_norm): LayerNorm((1024,), eps=1e-05, elementwise_affine=True)
          (adapterblock): AdapterBlock(
            (layer_norm1): LayerNorm((1024,), eps=1e-05, elementwise_affine=True)
            (conv1): Conv1d(1024, 512, kernel_size=(3,), stride=(1,), padding=same, groups=512, bias=False)
            (relu1): ReLU(inplace=True)
            (conv2): Conv1d(512, 512, kernel_size=(5,), stride=(1,), padding=same, groups=512, bias=False)
            (conv3): Conv1d(512, 1024, kernel_size=(3,), stride=(1,), padding=same, groups=512, bias=False)
            (se3): SELayer(
              (avg_pool): AdaptiveAvgPool1d(output_size=1)
              (fc): Sequential(
                (0): Linear(in_features=1024, out_features=64, bias=False)
                (1): ReLU(inplace=True)
                (2): Linear(in_features=64, out_features=1024, bias=False)
                (3): Sigmoid()
              )
            )
          )
        )
        (17): Wav2Vec2EncoderLayerStableLayerNorm(
          (attention): Wav2Vec2Attention(
            (k_proj): Linear(in_features=1024, out_features=1024, bias=True)
            (v_proj): Linear(in_features=1024, out_features=1024, bias=True)
            (q_proj): Linear(in_features=1024, out_features=1024, bias=True)
            (out_proj): Linear(in_features=1024, out_features=1024, bias=True)
          )
          (dropout): Dropout(p=0.05, inplace=False)
          (layer_norm): LayerNorm((1024,), eps=1e-05, elementwise_affine=True)
          (feed_forward): Wav2Vec2FeedForward(
            (intermediate_dropout): Dropout(p=0.05, inplace=False)
            (intermediate_dense): Linear(in_features=1024, out_features=4096, bias=True)
            (intermediate_act_fn): GELUActivation()
            (output_dense): Linear(in_features=4096, out_features=1024, bias=True)
            (output_dropout): Dropout(p=0.05, inplace=False)
          )
          (final_layer_norm): LayerNorm((1024,), eps=1e-05, elementwise_affine=True)
          (adapterblock): AdapterBlock(
            (layer_norm1): LayerNorm((1024,), eps=1e-05, elementwise_affine=True)
            (conv1): Conv1d(1024, 512, kernel_size=(3,), stride=(1,), padding=same, groups=512, bias=False)
            (relu1): ReLU(inplace=True)
            (conv2): Conv1d(512, 512, kernel_size=(5,), stride=(1,), padding=same, groups=512, bias=False)
            (conv3): Conv1d(512, 1024, kernel_size=(3,), stride=(1,), padding=same, groups=512, bias=False)
            (se3): SELayer(
              (avg_pool): AdaptiveAvgPool1d(output_size=1)
              (fc): Sequential(
                (0): Linear(in_features=1024, out_features=64, bias=False)
                (1): ReLU(inplace=True)
                (2): Linear(in_features=64, out_features=1024, bias=False)
                (3): Sigmoid()
              )
            )
          )
        )
        (18): Wav2Vec2EncoderLayerStableLayerNorm(
          (attention): Wav2Vec2Attention(
            (k_proj): Linear(in_features=1024, out_features=1024, bias=True)
            (v_proj): Linear(in_features=1024, out_features=1024, bias=True)
            (q_proj): Linear(in_features=1024, out_features=1024, bias=True)
            (out_proj): Linear(in_features=1024, out_features=1024, bias=True)
          )
          (dropout): Dropout(p=0.05, inplace=False)
          (layer_norm): LayerNorm((1024,), eps=1e-05, elementwise_affine=True)
          (feed_forward): Wav2Vec2FeedForward(
            (intermediate_dropout): Dropout(p=0.05, inplace=False)
            (intermediate_dense): Linear(in_features=1024, out_features=4096, bias=True)
            (intermediate_act_fn): GELUActivation()
            (output_dense): Linear(in_features=4096, out_features=1024, bias=True)
            (output_dropout): Dropout(p=0.05, inplace=False)
          )
          (final_layer_norm): LayerNorm((1024,), eps=1e-05, elementwise_affine=True)
          (adapterblock): AdapterBlock(
            (layer_norm1): LayerNorm((1024,), eps=1e-05, elementwise_affine=True)
            (conv1): Conv1d(1024, 512, kernel_size=(3,), stride=(1,), padding=same, groups=512, bias=False)
            (relu1): ReLU(inplace=True)
            (conv2): Conv1d(512, 512, kernel_size=(5,), stride=(1,), padding=same, groups=512, bias=False)
            (conv3): Conv1d(512, 1024, kernel_size=(3,), stride=(1,), padding=same, groups=512, bias=False)
            (se3): SELayer(
              (avg_pool): AdaptiveAvgPool1d(output_size=1)
              (fc): Sequential(
                (0): Linear(in_features=1024, out_features=64, bias=False)
                (1): ReLU(inplace=True)
                (2): Linear(in_features=64, out_features=1024, bias=False)
                (3): Sigmoid()
              )
            )
          )
        )
        (19): Wav2Vec2EncoderLayerStableLayerNorm(
          (attention): Wav2Vec2Attention(
            (k_proj): Linear(in_features=1024, out_features=1024, bias=True)
            (v_proj): Linear(in_features=1024, out_features=1024, bias=True)
            (q_proj): Linear(in_features=1024, out_features=1024, bias=True)
            (out_proj): Linear(in_features=1024, out_features=1024, bias=True)
          )
          (dropout): Dropout(p=0.05, inplace=False)
          (layer_norm): LayerNorm((1024,), eps=1e-05, elementwise_affine=True)
          (feed_forward): Wav2Vec2FeedForward(
            (intermediate_dropout): Dropout(p=0.05, inplace=False)
            (intermediate_dense): Linear(in_features=1024, out_features=4096, bias=True)
            (intermediate_act_fn): GELUActivation()
            (output_dense): Linear(in_features=4096, out_features=1024, bias=True)
            (output_dropout): Dropout(p=0.05, inplace=False)
          )
          (final_layer_norm): LayerNorm((1024,), eps=1e-05, elementwise_affine=True)
          (adapterblock): AdapterBlock(
            (layer_norm1): LayerNorm((1024,), eps=1e-05, elementwise_affine=True)
            (conv1): Conv1d(1024, 512, kernel_size=(3,), stride=(1,), padding=same, groups=512, bias=False)
            (relu1): ReLU(inplace=True)
            (conv2): Conv1d(512, 512, kernel_size=(5,), stride=(1,), padding=same, groups=512, bias=False)
            (conv3): Conv1d(512, 1024, kernel_size=(3,), stride=(1,), padding=same, groups=512, bias=False)
            (se3): SELayer(
              (avg_pool): AdaptiveAvgPool1d(output_size=1)
              (fc): Sequential(
                (0): Linear(in_features=1024, out_features=64, bias=False)
                (1): ReLU(inplace=True)
                (2): Linear(in_features=64, out_features=1024, bias=False)
                (3): Sigmoid()
              )
            )
          )
        )
        (20): Wav2Vec2EncoderLayerStableLayerNorm(
          (attention): Wav2Vec2Attention(
            (k_proj): Linear(in_features=1024, out_features=1024, bias=True)
            (v_proj): Linear(in_features=1024, out_features=1024, bias=True)
            (q_proj): Linear(in_features=1024, out_features=1024, bias=True)
            (out_proj): Linear(in_features=1024, out_features=1024, bias=True)
          )
          (dropout): Dropout(p=0.05, inplace=False)
          (layer_norm): LayerNorm((1024,), eps=1e-05, elementwise_affine=True)
          (feed_forward): Wav2Vec2FeedForward(
            (intermediate_dropout): Dropout(p=0.05, inplace=False)
            (intermediate_dense): Linear(in_features=1024, out_features=4096, bias=True)
            (intermediate_act_fn): GELUActivation()
            (output_dense): Linear(in_features=4096, out_features=1024, bias=True)
            (output_dropout): Dropout(p=0.05, inplace=False)
          )
          (final_layer_norm): LayerNorm((1024,), eps=1e-05, elementwise_affine=True)
          (adapterblock): AdapterBlock(
            (layer_norm1): LayerNorm((1024,), eps=1e-05, elementwise_affine=True)
            (conv1): Conv1d(1024, 512, kernel_size=(3,), stride=(1,), padding=same, groups=512, bias=False)
            (relu1): ReLU(inplace=True)
            (conv2): Conv1d(512, 512, kernel_size=(5,), stride=(1,), padding=same, groups=512, bias=False)
            (conv3): Conv1d(512, 1024, kernel_size=(3,), stride=(1,), padding=same, groups=512, bias=False)
            (se3): SELayer(
              (avg_pool): AdaptiveAvgPool1d(output_size=1)
              (fc): Sequential(
                (0): Linear(in_features=1024, out_features=64, bias=False)
                (1): ReLU(inplace=True)
                (2): Linear(in_features=64, out_features=1024, bias=False)
                (3): Sigmoid()
              )
            )
          )
        )
        (21): Wav2Vec2EncoderLayerStableLayerNorm(
          (attention): Wav2Vec2Attention(
            (k_proj): Linear(in_features=1024, out_features=1024, bias=True)
            (v_proj): Linear(in_features=1024, out_features=1024, bias=True)
            (q_proj): Linear(in_features=1024, out_features=1024, bias=True)
            (out_proj): Linear(in_features=1024, out_features=1024, bias=True)
          )
          (dropout): Dropout(p=0.05, inplace=False)
          (layer_norm): LayerNorm((1024,), eps=1e-05, elementwise_affine=True)
          (feed_forward): Wav2Vec2FeedForward(
            (intermediate_dropout): Dropout(p=0.05, inplace=False)
            (intermediate_dense): Linear(in_features=1024, out_features=4096, bias=True)
            (intermediate_act_fn): GELUActivation()
            (output_dense): Linear(in_features=4096, out_features=1024, bias=True)
            (output_dropout): Dropout(p=0.05, inplace=False)
          )
          (final_layer_norm): LayerNorm((1024,), eps=1e-05, elementwise_affine=True)
          (adapterblock): AdapterBlock(
            (layer_norm1): LayerNorm((1024,), eps=1e-05, elementwise_affine=True)
            (conv1): Conv1d(1024, 512, kernel_size=(3,), stride=(1,), padding=same, groups=512, bias=False)
            (relu1): ReLU(inplace=True)
            (conv2): Conv1d(512, 512, kernel_size=(5,), stride=(1,), padding=same, groups=512, bias=False)
            (conv3): Conv1d(512, 1024, kernel_size=(3,), stride=(1,), padding=same, groups=512, bias=False)
            (se3): SELayer(
              (avg_pool): AdaptiveAvgPool1d(output_size=1)
              (fc): Sequential(
                (0): Linear(in_features=1024, out_features=64, bias=False)
                (1): ReLU(inplace=True)
                (2): Linear(in_features=64, out_features=1024, bias=False)
                (3): Sigmoid()
              )
            )
          )
        )
        (22): Wav2Vec2EncoderLayerStableLayerNorm(
          (attention): Wav2Vec2Attention(
            (k_proj): Linear(in_features=1024, out_features=1024, bias=True)
            (v_proj): Linear(in_features=1024, out_features=1024, bias=True)
            (q_proj): Linear(in_features=1024, out_features=1024, bias=True)
            (out_proj): Linear(in_features=1024, out_features=1024, bias=True)
          )
          (dropout): Dropout(p=0.05, inplace=False)
          (layer_norm): LayerNorm((1024,), eps=1e-05, elementwise_affine=True)
          (feed_forward): Wav2Vec2FeedForward(
            (intermediate_dropout): Dropout(p=0.05, inplace=False)
            (intermediate_dense): Linear(in_features=1024, out_features=4096, bias=True)
            (intermediate_act_fn): GELUActivation()
            (output_dense): Linear(in_features=4096, out_features=1024, bias=True)
            (output_dropout): Dropout(p=0.05, inplace=False)
          )
          (final_layer_norm): LayerNorm((1024,), eps=1e-05, elementwise_affine=True)
          (adapterblock): AdapterBlock(
            (layer_norm1): LayerNorm((1024,), eps=1e-05, elementwise_affine=True)
            (conv1): Conv1d(1024, 512, kernel_size=(3,), stride=(1,), padding=same, groups=512, bias=False)
            (relu1): ReLU(inplace=True)
            (conv2): Conv1d(512, 512, kernel_size=(5,), stride=(1,), padding=same, groups=512, bias=False)
            (conv3): Conv1d(512, 1024, kernel_size=(3,), stride=(1,), padding=same, groups=512, bias=False)
            (se3): SELayer(
              (avg_pool): AdaptiveAvgPool1d(output_size=1)
              (fc): Sequential(
                (0): Linear(in_features=1024, out_features=64, bias=False)
                (1): ReLU(inplace=True)
                (2): Linear(in_features=64, out_features=1024, bias=False)
                (3): Sigmoid()
              )
            )
          )
        )
        (23): Wav2Vec2EncoderLayerStableLayerNorm(
          (attention): Wav2Vec2Attention(
            (k_proj): Linear(in_features=1024, out_features=1024, bias=True)
            (v_proj): Linear(in_features=1024, out_features=1024, bias=True)
            (q_proj): Linear(in_features=1024, out_features=1024, bias=True)
            (out_proj): Linear(in_features=1024, out_features=1024, bias=True)
          )
          (dropout): Dropout(p=0.05, inplace=False)
          (layer_norm): LayerNorm((1024,), eps=1e-05, elementwise_affine=True)
          (feed_forward): Wav2Vec2FeedForward(
            (intermediate_dropout): Dropout(p=0.05, inplace=False)
            (intermediate_dense): Linear(in_features=1024, out_features=4096, bias=True)
            (intermediate_act_fn): GELUActivation()
            (output_dense): Linear(in_features=4096, out_features=1024, bias=True)
            (output_dropout): Dropout(p=0.05, inplace=False)
          )
          (final_layer_norm): LayerNorm((1024,), eps=1e-05, elementwise_affine=True)
          (adapterblock): AdapterBlock(
            (layer_norm1): LayerNorm((1024,), eps=1e-05, elementwise_affine=True)
            (conv1): Conv1d(1024, 512, kernel_size=(3,), stride=(1,), padding=same, groups=512, bias=False)
            (relu1): ReLU(inplace=True)
            (conv2): Conv1d(512, 512, kernel_size=(5,), stride=(1,), padding=same, groups=512, bias=False)
            (conv3): Conv1d(512, 1024, kernel_size=(3,), stride=(1,), padding=same, groups=512, bias=False)
            (se3): SELayer(
              (avg_pool): AdaptiveAvgPool1d(output_size=1)
              (fc): Sequential(
                (0): Linear(in_features=1024, out_features=64, bias=False)
                (1): ReLU(inplace=True)
                (2): Linear(in_features=64, out_features=1024, bias=False)
                (3): Sigmoid()
              )
            )
          )
        )
      )
    )
  )
  (projector): Linear(in_features=1024, out_features=256, bias=True)
  (classifier): Linear(in_features=256, out_features=24, bias=True)
)

 #Train: 23132, #Valid: 3118, #Test: 3793 

------>>> Trainable params(before freeze): 319111064
------>>> Trainable params(after  freeze): 3672344
wav2vec2.encoder.layers.0.adapterblock.layer_norm1.weight True torch.Size([1024])
wav2vec2.encoder.layers.0.adapterblock.layer_norm1.bias True torch.Size([1024])
wav2vec2.encoder.layers.0.adapterblock.conv1.weight True torch.Size([512, 2, 3])
wav2vec2.encoder.layers.0.adapterblock.conv2.weight True torch.Size([512, 1, 5])
wav2vec2.encoder.layers.0.adapterblock.conv3.weight True torch.Size([1024, 1, 3])
wav2vec2.encoder.layers.0.adapterblock.se3.fc.0.weight True torch.Size([64, 1024])
wav2vec2.encoder.layers.0.adapterblock.se3.fc.2.weight True torch.Size([1024, 64])
wav2vec2.encoder.layers.1.adapterblock.layer_norm1.weight True torch.Size([1024])
wav2vec2.encoder.layers.1.adapterblock.layer_norm1.bias True torch.Size([1024])
wav2vec2.encoder.layers.1.adapterblock.conv1.weight True torch.Size([512, 2, 3])
wav2vec2.encoder.layers.1.adapterblock.conv2.weight True torch.Size([512, 1, 5])
wav2vec2.encoder.layers.1.adapterblock.conv3.weight True torch.Size([1024, 1, 3])
wav2vec2.encoder.layers.1.adapterblock.se3.fc.0.weight True torch.Size([64, 1024])
wav2vec2.encoder.layers.1.adapterblock.se3.fc.2.weight True torch.Size([1024, 64])
wav2vec2.encoder.layers.2.adapterblock.layer_norm1.weight True torch.Size([1024])
wav2vec2.encoder.layers.2.adapterblock.layer_norm1.bias True torch.Size([1024])
wav2vec2.encoder.layers.2.adapterblock.conv1.weight True torch.Size([512, 2, 3])
wav2vec2.encoder.layers.2.adapterblock.conv2.weight True torch.Size([512, 1, 5])
wav2vec2.encoder.layers.2.adapterblock.conv3.weight True torch.Size([1024, 1, 3])
wav2vec2.encoder.layers.2.adapterblock.se3.fc.0.weight True torch.Size([64, 1024])
wav2vec2.encoder.layers.2.adapterblock.se3.fc.2.weight True torch.Size([1024, 64])
wav2vec2.encoder.layers.3.adapterblock.layer_norm1.weight True torch.Size([1024])
wav2vec2.encoder.layers.3.adapterblock.layer_norm1.bias True torch.Size([1024])
wav2vec2.encoder.layers.3.adapterblock.conv1.weight True torch.Size([512, 2, 3])
wav2vec2.encoder.layers.3.adapterblock.conv2.weight True torch.Size([512, 1, 5])
wav2vec2.encoder.layers.3.adapterblock.conv3.weight True torch.Size([1024, 1, 3])
wav2vec2.encoder.layers.3.adapterblock.se3.fc.0.weight True torch.Size([64, 1024])
wav2vec2.encoder.layers.3.adapterblock.se3.fc.2.weight True torch.Size([1024, 64])
wav2vec2.encoder.layers.4.adapterblock.layer_norm1.weight True torch.Size([1024])
wav2vec2.encoder.layers.4.adapterblock.layer_norm1.bias True torch.Size([1024])
wav2vec2.encoder.layers.4.adapterblock.conv1.weight True torch.Size([512, 2, 3])
wav2vec2.encoder.layers.4.adapterblock.conv2.weight True torch.Size([512, 1, 5])
wav2vec2.encoder.layers.4.adapterblock.conv3.weight True torch.Size([1024, 1, 3])
wav2vec2.encoder.layers.4.adapterblock.se3.fc.0.weight True torch.Size([64, 1024])
wav2vec2.encoder.layers.4.adapterblock.se3.fc.2.weight True torch.Size([1024, 64])
wav2vec2.encoder.layers.5.adapterblock.layer_norm1.weight True torch.Size([1024])
wav2vec2.encoder.layers.5.adapterblock.layer_norm1.bias True torch.Size([1024])
wav2vec2.encoder.layers.5.adapterblock.conv1.weight True torch.Size([512, 2, 3])
wav2vec2.encoder.layers.5.adapterblock.conv2.weight True torch.Size([512, 1, 5])
wav2vec2.encoder.layers.5.adapterblock.conv3.weight True torch.Size([1024, 1, 3])
wav2vec2.encoder.layers.5.adapterblock.se3.fc.0.weight True torch.Size([64, 1024])
wav2vec2.encoder.layers.5.adapterblock.se3.fc.2.weight True torch.Size([1024, 64])
wav2vec2.encoder.layers.6.adapterblock.layer_norm1.weight True torch.Size([1024])
wav2vec2.encoder.layers.6.adapterblock.layer_norm1.bias True torch.Size([1024])
wav2vec2.encoder.layers.6.adapterblock.conv1.weight True torch.Size([512, 2, 3])
wav2vec2.encoder.layers.6.adapterblock.conv2.weight True torch.Size([512, 1, 5])
wav2vec2.encoder.layers.6.adapterblock.conv3.weight True torch.Size([1024, 1, 3])
wav2vec2.encoder.layers.6.adapterblock.se3.fc.0.weight True torch.Size([64, 1024])
wav2vec2.encoder.layers.6.adapterblock.se3.fc.2.weight True torch.Size([1024, 64])
wav2vec2.encoder.layers.7.adapterblock.layer_norm1.weight True torch.Size([1024])
wav2vec2.encoder.layers.7.adapterblock.layer_norm1.bias True torch.Size([1024])
wav2vec2.encoder.layers.7.adapterblock.conv1.weight True torch.Size([512, 2, 3])
wav2vec2.encoder.layers.7.adapterblock.conv2.weight True torch.Size([512, 1, 5])
wav2vec2.encoder.layers.7.adapterblock.conv3.weight True torch.Size([1024, 1, 3])
wav2vec2.encoder.layers.7.adapterblock.se3.fc.0.weight True torch.Size([64, 1024])
wav2vec2.encoder.layers.7.adapterblock.se3.fc.2.weight True torch.Size([1024, 64])
wav2vec2.encoder.layers.8.adapterblock.layer_norm1.weight True torch.Size([1024])
wav2vec2.encoder.layers.8.adapterblock.layer_norm1.bias True torch.Size([1024])
wav2vec2.encoder.layers.8.adapterblock.conv1.weight True torch.Size([512, 2, 3])
wav2vec2.encoder.layers.8.adapterblock.conv2.weight True torch.Size([512, 1, 5])
wav2vec2.encoder.layers.8.adapterblock.conv3.weight True torch.Size([1024, 1, 3])
wav2vec2.encoder.layers.8.adapterblock.se3.fc.0.weight True torch.Size([64, 1024])
wav2vec2.encoder.layers.8.adapterblock.se3.fc.2.weight True torch.Size([1024, 64])
wav2vec2.encoder.layers.9.adapterblock.layer_norm1.weight True torch.Size([1024])
wav2vec2.encoder.layers.9.adapterblock.layer_norm1.bias True torch.Size([1024])
wav2vec2.encoder.layers.9.adapterblock.conv1.weight True torch.Size([512, 2, 3])
wav2vec2.encoder.layers.9.adapterblock.conv2.weight True torch.Size([512, 1, 5])
wav2vec2.encoder.layers.9.adapterblock.conv3.weight True torch.Size([1024, 1, 3])
wav2vec2.encoder.layers.9.adapterblock.se3.fc.0.weight True torch.Size([64, 1024])
wav2vec2.encoder.layers.9.adapterblock.se3.fc.2.weight True torch.Size([1024, 64])
wav2vec2.encoder.layers.10.adapterblock.layer_norm1.weight True torch.Size([1024])
wav2vec2.encoder.layers.10.adapterblock.layer_norm1.bias True torch.Size([1024])
wav2vec2.encoder.layers.10.adapterblock.conv1.weight True torch.Size([512, 2, 3])
wav2vec2.encoder.layers.10.adapterblock.conv2.weight True torch.Size([512, 1, 5])
wav2vec2.encoder.layers.10.adapterblock.conv3.weight True torch.Size([1024, 1, 3])
wav2vec2.encoder.layers.10.adapterblock.se3.fc.0.weight True torch.Size([64, 1024])
wav2vec2.encoder.layers.10.adapterblock.se3.fc.2.weight True torch.Size([1024, 64])
wav2vec2.encoder.layers.11.adapterblock.layer_norm1.weight True torch.Size([1024])
wav2vec2.encoder.layers.11.adapterblock.layer_norm1.bias True torch.Size([1024])
wav2vec2.encoder.layers.11.adapterblock.conv1.weight True torch.Size([512, 2, 3])
wav2vec2.encoder.layers.11.adapterblock.conv2.weight True torch.Size([512, 1, 5])
wav2vec2.encoder.layers.11.adapterblock.conv3.weight True torch.Size([1024, 1, 3])
wav2vec2.encoder.layers.11.adapterblock.se3.fc.0.weight True torch.Size([64, 1024])
wav2vec2.encoder.layers.11.adapterblock.se3.fc.2.weight True torch.Size([1024, 64])
wav2vec2.encoder.layers.12.adapterblock.layer_norm1.weight True torch.Size([1024])
wav2vec2.encoder.layers.12.adapterblock.layer_norm1.bias True torch.Size([1024])
wav2vec2.encoder.layers.12.adapterblock.conv1.weight True torch.Size([512, 2, 3])
wav2vec2.encoder.layers.12.adapterblock.conv2.weight True torch.Size([512, 1, 5])
wav2vec2.encoder.layers.12.adapterblock.conv3.weight True torch.Size([1024, 1, 3])
wav2vec2.encoder.layers.12.adapterblock.se3.fc.0.weight True torch.Size([64, 1024])
wav2vec2.encoder.layers.12.adapterblock.se3.fc.2.weight True torch.Size([1024, 64])
wav2vec2.encoder.layers.13.adapterblock.layer_norm1.weight True torch.Size([1024])
wav2vec2.encoder.layers.13.adapterblock.layer_norm1.bias True torch.Size([1024])
wav2vec2.encoder.layers.13.adapterblock.conv1.weight True torch.Size([512, 2, 3])
wav2vec2.encoder.layers.13.adapterblock.conv2.weight True torch.Size([512, 1, 5])
wav2vec2.encoder.layers.13.adapterblock.conv3.weight True torch.Size([1024, 1, 3])
wav2vec2.encoder.layers.13.adapterblock.se3.fc.0.weight True torch.Size([64, 1024])
wav2vec2.encoder.layers.13.adapterblock.se3.fc.2.weight True torch.Size([1024, 64])
wav2vec2.encoder.layers.14.adapterblock.layer_norm1.weight True torch.Size([1024])
wav2vec2.encoder.layers.14.adapterblock.layer_norm1.bias True torch.Size([1024])
wav2vec2.encoder.layers.14.adapterblock.conv1.weight True torch.Size([512, 2, 3])
wav2vec2.encoder.layers.14.adapterblock.conv2.weight True torch.Size([512, 1, 5])
wav2vec2.encoder.layers.14.adapterblock.conv3.weight True torch.Size([1024, 1, 3])
wav2vec2.encoder.layers.14.adapterblock.se3.fc.0.weight True torch.Size([64, 1024])
wav2vec2.encoder.layers.14.adapterblock.se3.fc.2.weight True torch.Size([1024, 64])
wav2vec2.encoder.layers.15.adapterblock.layer_norm1.weight True torch.Size([1024])
wav2vec2.encoder.layers.15.adapterblock.layer_norm1.bias True torch.Size([1024])
wav2vec2.encoder.layers.15.adapterblock.conv1.weight True torch.Size([512, 2, 3])
wav2vec2.encoder.layers.15.adapterblock.conv2.weight True torch.Size([512, 1, 5])
wav2vec2.encoder.layers.15.adapterblock.conv3.weight True torch.Size([1024, 1, 3])
wav2vec2.encoder.layers.15.adapterblock.se3.fc.0.weight True torch.Size([64, 1024])
wav2vec2.encoder.layers.15.adapterblock.se3.fc.2.weight True torch.Size([1024, 64])
wav2vec2.encoder.layers.16.adapterblock.layer_norm1.weight True torch.Size([1024])
wav2vec2.encoder.layers.16.adapterblock.layer_norm1.bias True torch.Size([1024])
wav2vec2.encoder.layers.16.adapterblock.conv1.weight True torch.Size([512, 2, 3])
wav2vec2.encoder.layers.16.adapterblock.conv2.weight True torch.Size([512, 1, 5])
wav2vec2.encoder.layers.16.adapterblock.conv3.weight True torch.Size([1024, 1, 3])
wav2vec2.encoder.layers.16.adapterblock.se3.fc.0.weight True torch.Size([64, 1024])
wav2vec2.encoder.layers.16.adapterblock.se3.fc.2.weight True torch.Size([1024, 64])
wav2vec2.encoder.layers.17.adapterblock.layer_norm1.weight True torch.Size([1024])
wav2vec2.encoder.layers.17.adapterblock.layer_norm1.bias True torch.Size([1024])
wav2vec2.encoder.layers.17.adapterblock.conv1.weight True torch.Size([512, 2, 3])
wav2vec2.encoder.layers.17.adapterblock.conv2.weight True torch.Size([512, 1, 5])
wav2vec2.encoder.layers.17.adapterblock.conv3.weight True torch.Size([1024, 1, 3])
wav2vec2.encoder.layers.17.adapterblock.se3.fc.0.weight True torch.Size([64, 1024])
wav2vec2.encoder.layers.17.adapterblock.se3.fc.2.weight True torch.Size([1024, 64])
wav2vec2.encoder.layers.18.adapterblock.layer_norm1.weight True torch.Size([1024])
wav2vec2.encoder.layers.18.adapterblock.layer_norm1.bias True torch.Size([1024])
wav2vec2.encoder.layers.18.adapterblock.conv1.weight True torch.Size([512, 2, 3])
wav2vec2.encoder.layers.18.adapterblock.conv2.weight True torch.Size([512, 1, 5])
wav2vec2.encoder.layers.18.adapterblock.conv3.weight True torch.Size([1024, 1, 3])
wav2vec2.encoder.layers.18.adapterblock.se3.fc.0.weight True torch.Size([64, 1024])
wav2vec2.encoder.layers.18.adapterblock.se3.fc.2.weight True torch.Size([1024, 64])
wav2vec2.encoder.layers.19.adapterblock.layer_norm1.weight True torch.Size([1024])
wav2vec2.encoder.layers.19.adapterblock.layer_norm1.bias True torch.Size([1024])
wav2vec2.encoder.layers.19.adapterblock.conv1.weight True torch.Size([512, 2, 3])
wav2vec2.encoder.layers.19.adapterblock.conv2.weight True torch.Size([512, 1, 5])
wav2vec2.encoder.layers.19.adapterblock.conv3.weight True torch.Size([1024, 1, 3])
wav2vec2.encoder.layers.19.adapterblock.se3.fc.0.weight True torch.Size([64, 1024])
wav2vec2.encoder.layers.19.adapterblock.se3.fc.2.weight True torch.Size([1024, 64])
wav2vec2.encoder.layers.20.adapterblock.layer_norm1.weight True torch.Size([1024])
wav2vec2.encoder.layers.20.adapterblock.layer_norm1.bias True torch.Size([1024])
wav2vec2.encoder.layers.20.adapterblock.conv1.weight True torch.Size([512, 2, 3])
wav2vec2.encoder.layers.20.adapterblock.conv2.weight True torch.Size([512, 1, 5])
wav2vec2.encoder.layers.20.adapterblock.conv3.weight True torch.Size([1024, 1, 3])
wav2vec2.encoder.layers.20.adapterblock.se3.fc.0.weight True torch.Size([64, 1024])
wav2vec2.encoder.layers.20.adapterblock.se3.fc.2.weight True torch.Size([1024, 64])
wav2vec2.encoder.layers.21.adapterblock.layer_norm1.weight True torch.Size([1024])
wav2vec2.encoder.layers.21.adapterblock.layer_norm1.bias True torch.Size([1024])
wav2vec2.encoder.layers.21.adapterblock.conv1.weight True torch.Size([512, 2, 3])
wav2vec2.encoder.layers.21.adapterblock.conv2.weight True torch.Size([512, 1, 5])
wav2vec2.encoder.layers.21.adapterblock.conv3.weight True torch.Size([1024, 1, 3])
wav2vec2.encoder.layers.21.adapterblock.se3.fc.0.weight True torch.Size([64, 1024])
wav2vec2.encoder.layers.21.adapterblock.se3.fc.2.weight True torch.Size([1024, 64])
wav2vec2.encoder.layers.22.adapterblock.layer_norm1.weight True torch.Size([1024])
wav2vec2.encoder.layers.22.adapterblock.layer_norm1.bias True torch.Size([1024])
wav2vec2.encoder.layers.22.adapterblock.conv1.weight True torch.Size([512, 2, 3])
wav2vec2.encoder.layers.22.adapterblock.conv2.weight True torch.Size([512, 1, 5])
wav2vec2.encoder.layers.22.adapterblock.conv3.weight True torch.Size([1024, 1, 3])
wav2vec2.encoder.layers.22.adapterblock.se3.fc.0.weight True torch.Size([64, 1024])
wav2vec2.encoder.layers.22.adapterblock.se3.fc.2.weight True torch.Size([1024, 64])
wav2vec2.encoder.layers.23.adapterblock.layer_norm1.weight True torch.Size([1024])
wav2vec2.encoder.layers.23.adapterblock.layer_norm1.bias True torch.Size([1024])
wav2vec2.encoder.layers.23.adapterblock.conv1.weight True torch.Size([512, 2, 3])
wav2vec2.encoder.layers.23.adapterblock.conv2.weight True torch.Size([512, 1, 5])
wav2vec2.encoder.layers.23.adapterblock.conv3.weight True torch.Size([1024, 1, 3])
wav2vec2.encoder.layers.23.adapterblock.se3.fc.0.weight True torch.Size([64, 1024])
wav2vec2.encoder.layers.23.adapterblock.se3.fc.2.weight True torch.Size([1024, 64])
projector.weight True torch.Size([256, 1024])
projector.bias True torch.Size([256])
classifier.weight True torch.Size([24, 256])
classifier.bias True torch.Size([24])
{'loss': 5.8264, 'learning_rate': 1.10803324099723e-06, 'epoch': 0.06}
{'eval_loss': 5.813910484313965, 'eval_acc': 0.0, 'eval_runtime': 70.083, 'eval_samples_per_second': 44.49, 'eval_steps_per_second': 2.782, 'epoch': 0.07}
{'loss': 5.8161, 'learning_rate': 2.21606648199446e-06, 'epoch': 0.11}
{'eval_loss': 5.7887091636657715, 'eval_acc': 0.0028864656831302116, 'eval_runtime': 70.6619, 'eval_samples_per_second': 44.126, 'eval_steps_per_second': 2.76, 'epoch': 0.14}
{'loss': 5.7989, 'learning_rate': 3.32409972299169e-06, 'epoch': 0.17}
{'eval_loss': 5.746846675872803, 'eval_acc': 0.023412443874278384, 'eval_runtime': 70.6776, 'eval_samples_per_second': 44.116, 'eval_steps_per_second': 2.759, 'epoch': 0.21}
{'loss': 5.7724, 'learning_rate': 4.43213296398892e-06, 'epoch': 0.22}
{'loss': 5.7356, 'learning_rate': 5.540166204986149e-06, 'epoch': 0.28}
{'eval_loss': 5.689303874969482, 'eval_acc': 0.04682488774855677, 'eval_runtime': 70.2304, 'eval_samples_per_second': 44.397, 'eval_steps_per_second': 2.777, 'epoch': 0.28}
{'loss': 5.6836, 'learning_rate': 6.64819944598338e-06, 'epoch': 0.33}
{'eval_loss': 5.616542339324951, 'eval_acc': 0.04810776138550353, 'eval_runtime': 69.866, 'eval_samples_per_second': 44.628, 'eval_steps_per_second': 2.791, 'epoch': 0.35}
{'loss': 5.6395, 'learning_rate': 7.75623268698061e-06, 'epoch': 0.39}
{'eval_loss': 5.529678821563721, 'eval_acc': 0.04778704297626684, 'eval_runtime': 70.5679, 'eval_samples_per_second': 44.184, 'eval_steps_per_second': 2.763, 'epoch': 0.41}
{'loss': 5.5724, 'learning_rate': 8.86426592797784e-06, 'epoch': 0.44}
{'eval_loss': 5.428696632385254, 'eval_acc': 0.04810776138550353, 'eval_runtime': 70.3413, 'eval_samples_per_second': 44.327, 'eval_steps_per_second': 2.772, 'epoch': 0.48}
{'loss': 5.5072, 'learning_rate': 9.97229916897507e-06, 'epoch': 0.5}
{'loss': 5.432, 'learning_rate': 1.1080332409972299e-05, 'epoch': 0.55}
{'eval_loss': 5.316275119781494, 'eval_acc': 0.04778704297626684, 'eval_runtime': 69.9335, 'eval_samples_per_second': 44.585, 'eval_steps_per_second': 2.788, 'epoch': 0.55}
{'loss': 5.3153, 'learning_rate': 1.218836565096953e-05, 'epoch': 0.61}
{'eval_loss': 5.194244384765625, 'eval_acc': 0.04971135343168698, 'eval_runtime': 70.5109, 'eval_samples_per_second': 44.22, 'eval_steps_per_second': 2.766, 'epoch': 0.62}
{'loss': 5.2396, 'learning_rate': 1.329639889196676e-05, 'epoch': 0.66}
{'eval_loss': 5.071858882904053, 'eval_acc': 0.04810776138550353, 'eval_runtime': 70.5117, 'eval_samples_per_second': 44.22, 'eval_steps_per_second': 2.765, 'epoch': 0.69}
{'loss': 5.1339, 'learning_rate': 1.4404432132963991e-05, 'epoch': 0.72}
{'eval_loss': 4.957831382751465, 'eval_acc': 0.04650416933932008, 'eval_runtime': 70.1695, 'eval_samples_per_second': 44.435, 'eval_steps_per_second': 2.779, 'epoch': 0.76}
{'loss': 5.0524, 'learning_rate': 1.551246537396122e-05, 'epoch': 0.77}
{'loss': 4.9907, 'learning_rate': 1.6620498614958448e-05, 'epoch': 0.83}
{'eval_loss': 4.869119167327881, 'eval_acc': 0.04650416933932008, 'eval_runtime': 69.8192, 'eval_samples_per_second': 44.658, 'eval_steps_per_second': 2.793, 'epoch': 0.83}
{'loss': 4.8975, 'learning_rate': 1.772853185595568e-05, 'epoch': 0.89}
{'eval_loss': 4.807929039001465, 'eval_acc': 0.04650416933932008, 'eval_runtime': 70.6501, 'eval_samples_per_second': 44.133, 'eval_steps_per_second': 2.76, 'epoch': 0.9}
{'loss': 4.826, 'learning_rate': 1.883656509695291e-05, 'epoch': 0.94}
{'eval_loss': 4.7636823654174805, 'eval_acc': 0.04650416933932008, 'eval_runtime': 70.4232, 'eval_samples_per_second': 44.275, 'eval_steps_per_second': 2.769, 'epoch': 0.97}
{'loss': 4.8268, 'learning_rate': 1.994459833795014e-05, 'epoch': 1.0}
{'eval_loss': 4.736358165740967, 'eval_acc': 0.04650416933932008, 'eval_runtime': 70.773, 'eval_samples_per_second': 44.056, 'eval_steps_per_second': 2.755, 'epoch': 1.04}
{'loss': 4.9271, 'learning_rate': 2.105263157894737e-05, 'epoch': 1.05}
{'loss': 4.7621, 'learning_rate': 2.2160664819944597e-05, 'epoch': 1.11}
{'eval_loss': 4.719876766204834, 'eval_acc': 0.04650416933932008, 'eval_runtime': 69.9939, 'eval_samples_per_second': 44.547, 'eval_steps_per_second': 2.786, 'epoch': 1.11}
{'loss': 4.7686, 'learning_rate': 2.326869806094183e-05, 'epoch': 1.16}
{'eval_loss': 4.706195831298828, 'eval_acc': 0.061257216164207824, 'eval_runtime': 69.751, 'eval_samples_per_second': 44.702, 'eval_steps_per_second': 2.796, 'epoch': 1.18}
{'loss': 4.7422, 'learning_rate': 2.437673130193906e-05, 'epoch': 1.22}
{'eval_loss': 4.690388202667236, 'eval_acc': 0.04778704297626684, 'eval_runtime': 70.4228, 'eval_samples_per_second': 44.275, 'eval_steps_per_second': 2.769, 'epoch': 1.25}
{'loss': 4.7696, 'learning_rate': 2.548476454293629e-05, 'epoch': 1.27}
{'eval_loss': 4.671100616455078, 'eval_acc': 0.04650416933932008, 'eval_runtime': 70.0801, 'eval_samples_per_second': 44.492, 'eval_steps_per_second': 2.783, 'epoch': 1.32}
{'loss': 4.7037, 'learning_rate': 2.659279778393352e-05, 'epoch': 1.33}
{'loss': 4.734, 'learning_rate': 2.770083102493075e-05, 'epoch': 1.38}
{'eval_loss': 4.654046535491943, 'eval_acc': 0.04746632456703015, 'eval_runtime': 69.895, 'eval_samples_per_second': 44.61, 'eval_steps_per_second': 2.79, 'epoch': 1.38}
{'loss': 4.6824, 'learning_rate': 2.8808864265927982e-05, 'epoch': 1.44}
{'eval_loss': 4.6376729011535645, 'eval_acc': 0.04650416933932008, 'eval_runtime': 70.1685, 'eval_samples_per_second': 44.436, 'eval_steps_per_second': 2.779, 'epoch': 1.45}
{'loss': 4.7487, 'learning_rate': 2.9916897506925207e-05, 'epoch': 1.5}
{'eval_loss': 4.608460426330566, 'eval_acc': 0.0689544579858884, 'eval_runtime': 69.7301, 'eval_samples_per_second': 44.715, 'eval_steps_per_second': 2.796, 'epoch': 1.52}
{'loss': 4.6651, 'learning_rate': 3.102493074792244e-05, 'epoch': 1.55}
{'eval_loss': 4.573462963104248, 'eval_acc': 0.04682488774855677, 'eval_runtime': 70.3892, 'eval_samples_per_second': 44.297, 'eval_steps_per_second': 2.77, 'epoch': 1.59}
{'loss': 4.7013, 'learning_rate': 3.213296398891967e-05, 'epoch': 1.61}
{'loss': 4.6148, 'learning_rate': 3.3240997229916896e-05, 'epoch': 1.66}
{'eval_loss': 4.533890724182129, 'eval_acc': 0.04746632456703015, 'eval_runtime': 70.2409, 'eval_samples_per_second': 44.39, 'eval_steps_per_second': 2.776, 'epoch': 1.66}
{'loss': 4.605, 'learning_rate': 3.434903047091413e-05, 'epoch': 1.72}
{'eval_loss': 4.479474067687988, 'eval_acc': 0.058050032071840924, 'eval_runtime': 70.076, 'eval_samples_per_second': 44.495, 'eval_steps_per_second': 2.783, 'epoch': 1.73}
{'loss': 4.5241, 'learning_rate': 3.545706371191136e-05, 'epoch': 1.77}
{'eval_loss': 4.408953666687012, 'eval_acc': 0.06254008980115458, 'eval_runtime': 70.419, 'eval_samples_per_second': 44.278, 'eval_steps_per_second': 2.769, 'epoch': 1.8}
{'loss': 4.4949, 'learning_rate': 3.656509695290859e-05, 'epoch': 1.83}
{'eval_loss': 4.316889762878418, 'eval_acc': 0.07440667094291212, 'eval_runtime': 70.3974, 'eval_samples_per_second': 44.291, 'eval_steps_per_second': 2.77, 'epoch': 1.87}
{'loss': 4.4226, 'learning_rate': 3.767313019390582e-05, 'epoch': 1.88}
{'loss': 4.4005, 'learning_rate': 3.878116343490305e-05, 'epoch': 1.94}
{'eval_loss': 4.205248832702637, 'eval_acc': 0.14913406029506093, 'eval_runtime': 69.9681, 'eval_samples_per_second': 44.563, 'eval_steps_per_second': 2.787, 'epoch': 1.94}
{'loss': 4.2239, 'learning_rate': 3.988919667590028e-05, 'epoch': 1.99}
{'eval_loss': 4.041212558746338, 'eval_acc': 0.14881334188582424, 'eval_runtime': 70.3227, 'eval_samples_per_second': 44.338, 'eval_steps_per_second': 2.773, 'epoch': 2.01}
{'loss': 4.2352, 'learning_rate': 4.099722991689751e-05, 'epoch': 2.05}
{'eval_loss': 3.8645901679992676, 'eval_acc': 0.18152661962796665, 'eval_runtime': 70.129, 'eval_samples_per_second': 44.461, 'eval_steps_per_second': 2.781, 'epoch': 2.08}
{'loss': 4.0627, 'learning_rate': 4.210526315789474e-05, 'epoch': 2.11}
{'eval_loss': 3.6867778301239014, 'eval_acc': 0.19563822963438102, 'eval_runtime': 70.4294, 'eval_samples_per_second': 44.271, 'eval_steps_per_second': 2.769, 'epoch': 2.15}
{'loss': 3.9454, 'learning_rate': 4.321329639889197e-05, 'epoch': 2.16}
{'loss': 3.758, 'learning_rate': 4.4321329639889195e-05, 'epoch': 2.22}
{'eval_loss': 3.488229990005493, 'eval_acc': 0.1985246953175112, 'eval_runtime': 70.4302, 'eval_samples_per_second': 44.271, 'eval_steps_per_second': 2.769, 'epoch': 2.22}
{'loss': 3.5978, 'learning_rate': 4.542936288088643e-05, 'epoch': 2.27}
{'eval_loss': 3.313765048980713, 'eval_acc': 0.2065426555484285, 'eval_runtime': 70.3111, 'eval_samples_per_second': 44.346, 'eval_steps_per_second': 2.773, 'epoch': 2.28}
{'loss': 3.4419, 'learning_rate': 4.653739612188366e-05, 'epoch': 2.33}
{'eval_loss': 3.0963780879974365, 'eval_acc': 0.23572803078896729, 'eval_runtime': 69.676, 'eval_samples_per_second': 44.75, 'eval_steps_per_second': 2.799, 'epoch': 2.35}
{'loss': 3.3781, 'learning_rate': 4.764542936288089e-05, 'epoch': 2.38}
{'eval_loss': 2.9232537746429443, 'eval_acc': 0.2610647851186658, 'eval_runtime': 70.3685, 'eval_samples_per_second': 44.31, 'eval_steps_per_second': 2.771, 'epoch': 2.42}
{'loss': 3.1608, 'learning_rate': 4.875346260387812e-05, 'epoch': 2.44}
{'loss': 3.047, 'learning_rate': 4.986149584487535e-05, 'epoch': 2.49}
{'eval_loss': 2.7520246505737305, 'eval_acc': 0.2905708787684413, 'eval_runtime': 70.3426, 'eval_samples_per_second': 44.326, 'eval_steps_per_second': 2.772, 'epoch': 2.49}
{'loss': 2.9763, 'learning_rate': 5.096952908587258e-05, 'epoch': 2.55}
{'eval_loss': 2.597670555114746, 'eval_acc': 0.31622835150737655, 'eval_runtime': 69.7568, 'eval_samples_per_second': 44.698, 'eval_steps_per_second': 2.795, 'epoch': 2.56}
{'loss': 2.8487, 'learning_rate': 5.207756232686981e-05, 'epoch': 2.6}
{'eval_loss': 2.462061643600464, 'eval_acc': 0.3373957665169981, 'eval_runtime': 70.4395, 'eval_samples_per_second': 44.265, 'eval_steps_per_second': 2.768, 'epoch': 2.63}
{'loss': 2.7299, 'learning_rate': 5.318559556786704e-05, 'epoch': 2.66}
{'eval_loss': 2.331427812576294, 'eval_acc': 0.3563181526619628, 'eval_runtime': 70.4128, 'eval_samples_per_second': 44.282, 'eval_steps_per_second': 2.769, 'epoch': 2.7}
{'loss': 2.624, 'learning_rate': 5.4293628808864275e-05, 'epoch': 2.71}
{'loss': 2.5571, 'learning_rate': 5.54016620498615e-05, 'epoch': 2.77}
{'eval_loss': 2.2431159019470215, 'eval_acc': 0.3723540731237973, 'eval_runtime': 70.0, 'eval_samples_per_second': 44.543, 'eval_steps_per_second': 2.786, 'epoch': 2.77}
{'loss': 2.5237, 'learning_rate': 5.650969529085873e-05, 'epoch': 2.82}
{'eval_loss': 2.1739630699157715, 'eval_acc': 0.40025657472738935, 'eval_runtime': 70.3, 'eval_samples_per_second': 44.353, 'eval_steps_per_second': 2.774, 'epoch': 2.84}
{'loss': 2.3992, 'learning_rate': 5.7617728531855964e-05, 'epoch': 2.88}
{'eval_loss': 2.0870540142059326, 'eval_acc': 0.41789608723540733, 'eval_runtime': 69.903, 'eval_samples_per_second': 44.605, 'eval_steps_per_second': 2.79, 'epoch': 2.91}
{'loss': 2.3128, 'learning_rate': 5.8725761772853196e-05, 'epoch': 2.93}
{'eval_loss': 2.0152714252471924, 'eval_acc': 0.42046183450930086, 'eval_runtime': 70.3566, 'eval_samples_per_second': 44.317, 'eval_steps_per_second': 2.772, 'epoch': 2.98}
{'loss': 2.2719, 'learning_rate': 5.9833795013850414e-05, 'epoch': 2.99}
{'loss': 2.2918, 'learning_rate': 6.0941828254847646e-05, 'epoch': 3.05}
{'eval_loss': 1.9582957029342651, 'eval_acc': 0.4345734445157152, 'eval_runtime': 69.7391, 'eval_samples_per_second': 44.71, 'eval_steps_per_second': 2.796, 'epoch': 3.05}
{'loss': 2.1728, 'learning_rate': 6.204986149584488e-05, 'epoch': 3.1}
{'eval_loss': 1.8813222646713257, 'eval_acc': 0.4550994227068634, 'eval_runtime': 70.4084, 'eval_samples_per_second': 44.285, 'eval_steps_per_second': 2.77, 'epoch': 3.12}
{'loss': 2.1311, 'learning_rate': 6.31578947368421e-05, 'epoch': 3.16}
{'eval_loss': 1.8303420543670654, 'eval_acc': 0.47209749839640797, 'eval_runtime': 70.3162, 'eval_samples_per_second': 44.343, 'eval_steps_per_second': 2.773, 'epoch': 3.19}
{'loss': 2.1421, 'learning_rate': 6.426592797783934e-05, 'epoch': 3.21}
{'eval_loss': 1.7574126720428467, 'eval_acc': 0.481398332264272, 'eval_runtime': 70.1797, 'eval_samples_per_second': 44.429, 'eval_steps_per_second': 2.779, 'epoch': 3.25}
{'loss': 2.0466, 'learning_rate': 6.537396121883657e-05, 'epoch': 3.27}
{'loss': 2.0011, 'learning_rate': 6.648199445983379e-05, 'epoch': 3.32}
{'eval_loss': 1.7017370462417603, 'eval_acc': 0.49550994227068634, 'eval_runtime': 70.0397, 'eval_samples_per_second': 44.518, 'eval_steps_per_second': 2.784, 'epoch': 3.32}
{'loss': 1.937, 'learning_rate': 6.759002770083103e-05, 'epoch': 3.38}
{'eval_loss': 1.6511881351470947, 'eval_acc': 0.5016035920461834, 'eval_runtime': 70.5333, 'eval_samples_per_second': 44.206, 'eval_steps_per_second': 2.765, 'epoch': 3.39}
{'loss': 1.9064, 'learning_rate': 6.869806094182826e-05, 'epoch': 3.43}
{'eval_loss': 1.5948576927185059, 'eval_acc': 0.5208466966003849, 'eval_runtime': 70.3837, 'eval_samples_per_second': 44.3, 'eval_steps_per_second': 2.771, 'epoch': 3.46}
{'loss': 1.8993, 'learning_rate': 6.980609418282548e-05, 'epoch': 3.49}
{'eval_loss': 1.5556737184524536, 'eval_acc': 0.5214881334188582, 'eval_runtime': 70.2489, 'eval_samples_per_second': 44.385, 'eval_steps_per_second': 2.776, 'epoch': 3.53}
{'loss': 1.8064, 'learning_rate': 7.091412742382272e-05, 'epoch': 3.54}
{'loss': 1.8622, 'learning_rate': 7.202216066481994e-05, 'epoch': 3.6}
{'eval_loss': 1.5018491744995117, 'eval_acc': 0.5416933932007697, 'eval_runtime': 69.8272, 'eval_samples_per_second': 44.653, 'eval_steps_per_second': 2.793, 'epoch': 3.6}
{'loss': 1.7554, 'learning_rate': 7.313019390581718e-05, 'epoch': 3.66}
{'eval_loss': 1.4667623043060303, 'eval_acc': 0.5516356638871072, 'eval_runtime': 70.5675, 'eval_samples_per_second': 44.185, 'eval_steps_per_second': 2.763, 'epoch': 3.67}
{'loss': 1.7362, 'learning_rate': 7.423822714681441e-05, 'epoch': 3.71}
{'eval_loss': 1.4279587268829346, 'eval_acc': 0.5638229634381013, 'eval_runtime': 70.4511, 'eval_samples_per_second': 44.258, 'eval_steps_per_second': 2.768, 'epoch': 3.74}
{'loss': 1.6069, 'learning_rate': 7.534626038781163e-05, 'epoch': 3.77}
{'eval_loss': 1.380448579788208, 'eval_acc': 0.5894804361770366, 'eval_runtime': 70.2085, 'eval_samples_per_second': 44.411, 'eval_steps_per_second': 2.777, 'epoch': 3.81}
{'loss': 1.6476, 'learning_rate': 7.645429362880887e-05, 'epoch': 3.82}
{'loss': 1.6948, 'learning_rate': 7.75623268698061e-05, 'epoch': 3.88}
{'eval_loss': 1.3361657857894897, 'eval_acc': 0.5991019884541373, 'eval_runtime': 69.7007, 'eval_samples_per_second': 44.734, 'eval_steps_per_second': 2.798, 'epoch': 3.88}
{'loss': 1.5826, 'learning_rate': 7.867036011080334e-05, 'epoch': 3.93}
{'eval_loss': 1.3161036968231201, 'eval_acc': 0.5997434252726106, 'eval_runtime': 70.4112, 'eval_samples_per_second': 44.283, 'eval_steps_per_second': 2.769, 'epoch': 3.95}
{'loss': 1.5939, 'learning_rate': 7.977839335180056e-05, 'epoch': 3.99}
{'eval_loss': 1.2678477764129639, 'eval_acc': 0.6340602950609365, 'eval_runtime': 70.6266, 'eval_samples_per_second': 44.148, 'eval_steps_per_second': 2.761, 'epoch': 4.02}
{'loss': 1.567, 'learning_rate': 8.088642659279779e-05, 'epoch': 4.04}
{'eval_loss': 1.2278584241867065, 'eval_acc': 0.6372674791533034, 'eval_runtime': 70.4566, 'eval_samples_per_second': 44.254, 'eval_steps_per_second': 2.768, 'epoch': 4.09}
{'loss': 1.5483, 'learning_rate': 8.199445983379503e-05, 'epoch': 4.1}
{'loss': 1.4834, 'learning_rate': 8.310249307479224e-05, 'epoch': 4.15}
{'eval_loss': 1.1893037557601929, 'eval_acc': 0.6414368184733804, 'eval_runtime': 70.3205, 'eval_samples_per_second': 44.34, 'eval_steps_per_second': 2.773, 'epoch': 4.15}
{'loss': 1.3333, 'learning_rate': 8.421052631578948e-05, 'epoch': 4.21}
{'eval_loss': 1.1532024145126343, 'eval_acc': 0.6690186016677357, 'eval_runtime': 70.5216, 'eval_samples_per_second': 44.213, 'eval_steps_per_second': 2.765, 'epoch': 4.22}
{'loss': 1.3798, 'learning_rate': 8.53185595567867e-05, 'epoch': 4.27}
{'eval_loss': 1.1278191804885864, 'eval_acc': 0.6664528543938422, 'eval_runtime': 69.7881, 'eval_samples_per_second': 44.678, 'eval_steps_per_second': 2.794, 'epoch': 4.29}
{'loss': 1.3427, 'learning_rate': 8.642659279778394e-05, 'epoch': 4.32}
{'eval_loss': 1.1041977405548096, 'eval_acc': 0.687299550994227, 'eval_runtime': 70.5261, 'eval_samples_per_second': 44.211, 'eval_steps_per_second': 2.765, 'epoch': 4.36}
{'loss': 1.3918, 'learning_rate': 8.753462603878116e-05, 'epoch': 4.38}
{'loss': 1.3949, 'learning_rate': 8.864265927977839e-05, 'epoch': 4.43}
{'eval_loss': 1.0663548707962036, 'eval_acc': 0.7094291212315587, 'eval_runtime': 70.5731, 'eval_samples_per_second': 44.181, 'eval_steps_per_second': 2.763, 'epoch': 4.43}
{'loss': 1.3342, 'learning_rate': 8.975069252077563e-05, 'epoch': 4.49}
{'eval_loss': 1.033837080001831, 'eval_acc': 0.7075048107761386, 'eval_runtime': 69.9871, 'eval_samples_per_second': 44.551, 'eval_steps_per_second': 2.786, 'epoch': 4.5}
{'loss': 1.2883, 'learning_rate': 9.085872576177285e-05, 'epoch': 4.54}
{'eval_loss': 1.0097455978393555, 'eval_acc': 0.7350865939704939, 'eval_runtime': 69.5769, 'eval_samples_per_second': 44.814, 'eval_steps_per_second': 2.803, 'epoch': 4.57}
{'loss': 1.3122, 'learning_rate': 9.196675900277009e-05, 'epoch': 4.6}
{'eval_loss': 0.9803935885429382, 'eval_acc': 0.7350865939704939, 'eval_runtime': 70.4976, 'eval_samples_per_second': 44.228, 'eval_steps_per_second': 2.766, 'epoch': 4.64}
{'loss': 1.2896, 'learning_rate': 9.307479224376732e-05, 'epoch': 4.65}
{'loss': 1.2562, 'learning_rate': 9.418282548476454e-05, 'epoch': 4.71}
{'eval_loss': 0.9468063116073608, 'eval_acc': 0.7556125721616421, 'eval_runtime': 70.3788, 'eval_samples_per_second': 44.303, 'eval_steps_per_second': 2.771, 'epoch': 4.71}
{'loss': 1.1589, 'learning_rate': 9.529085872576178e-05, 'epoch': 4.76}
{'eval_loss': 0.9213874936103821, 'eval_acc': 0.7482360487491982, 'eval_runtime': 69.8676, 'eval_samples_per_second': 44.627, 'eval_steps_per_second': 2.791, 'epoch': 4.78}
{'loss': 1.2895, 'learning_rate': 9.6398891966759e-05, 'epoch': 4.82}
{'eval_loss': 0.9354901313781738, 'eval_acc': 0.7495189223861449, 'eval_runtime': 70.6105, 'eval_samples_per_second': 44.158, 'eval_steps_per_second': 2.762, 'epoch': 4.85}
{'loss': 1.1839, 'learning_rate': 9.750692520775624e-05, 'epoch': 4.87}
{'eval_loss': 0.8828313946723938, 'eval_acc': 0.7536882617062219, 'eval_runtime': 70.4191, 'eval_samples_per_second': 44.278, 'eval_steps_per_second': 2.769, 'epoch': 4.92}
{'loss': 1.1895, 'learning_rate': 9.861495844875347e-05, 'epoch': 4.93}
{'loss': 1.1888, 'learning_rate': 9.97229916897507e-05, 'epoch': 4.98}
{'eval_loss': 0.8682444095611572, 'eval_acc': 0.7575368826170622, 'eval_runtime': 70.1767, 'eval_samples_per_second': 44.431, 'eval_steps_per_second': 2.779, 'epoch': 4.98}
{'loss': 1.0964, 'learning_rate': 0.00010083102493074792, 'epoch': 5.04}
{'eval_loss': 0.8414409160614014, 'eval_acc': 0.7703656189865298, 'eval_runtime': 70.3515, 'eval_samples_per_second': 44.32, 'eval_steps_per_second': 2.772, 'epoch': 5.06}
{'loss': 1.117, 'learning_rate': 0.00010193905817174516, 'epoch': 5.1}
{'eval_loss': 0.8218802213668823, 'eval_acc': 0.7729313662604234, 'eval_runtime': 69.9208, 'eval_samples_per_second': 44.593, 'eval_steps_per_second': 2.789, 'epoch': 5.12}
{'loss': 1.1468, 'learning_rate': 0.00010304709141274238, 'epoch': 5.15}
{'eval_loss': 0.7941455841064453, 'eval_acc': 0.789929441949968, 'eval_runtime': 70.5536, 'eval_samples_per_second': 44.193, 'eval_steps_per_second': 2.764, 'epoch': 5.19}
{'loss': 1.0871, 'learning_rate': 0.00010415512465373962, 'epoch': 5.21}
{'loss': 1.0163, 'learning_rate': 0.00010526315789473685, 'epoch': 5.26}
{'eval_loss': 0.7738621830940247, 'eval_acc': 0.7979474021808852, 'eval_runtime': 70.4773, 'eval_samples_per_second': 44.241, 'eval_steps_per_second': 2.767, 'epoch': 5.26}
{'loss': 1.0915, 'learning_rate': 0.00010637119113573409, 'epoch': 5.32}
{'eval_loss': 0.7702576518058777, 'eval_acc': 0.7867222578576011, 'eval_runtime': 70.1438, 'eval_samples_per_second': 44.452, 'eval_steps_per_second': 2.78, 'epoch': 5.33}
{'loss': 1.0381, 'learning_rate': 0.0001074792243767313, 'epoch': 5.37}
{'eval_loss': 0.7380920648574829, 'eval_acc': 0.7966645285439384, 'eval_runtime': 69.7467, 'eval_samples_per_second': 44.705, 'eval_steps_per_second': 2.796, 'epoch': 5.4}
{'loss': 1.0235, 'learning_rate': 0.00010858725761772855, 'epoch': 5.43}
{'eval_loss': 0.7161615490913391, 'eval_acc': 0.7982681205901219, 'eval_runtime': 70.388, 'eval_samples_per_second': 44.297, 'eval_steps_per_second': 2.77, 'epoch': 5.47}
{'loss': 1.0625, 'learning_rate': 0.00010969529085872576, 'epoch': 5.48}
{'loss': 1.0372, 'learning_rate': 0.000110803324099723, 'epoch': 5.54}
{'eval_loss': 0.7077735662460327, 'eval_acc': 0.8117382937780628, 'eval_runtime': 70.172, 'eval_samples_per_second': 44.434, 'eval_steps_per_second': 2.779, 'epoch': 5.54}
{'loss': 0.8823, 'learning_rate': 0.00011191135734072023, 'epoch': 5.59}
{'eval_loss': 0.6983460187911987, 'eval_acc': 0.8146247594611931, 'eval_runtime': 70.4921, 'eval_samples_per_second': 44.232, 'eval_steps_per_second': 2.766, 'epoch': 5.61}
{'loss': 0.9208, 'learning_rate': 0.00011301939058171746, 'epoch': 5.65}
{'eval_loss': 0.6805547475814819, 'eval_acc': 0.8114175753688262, 'eval_runtime': 69.9961, 'eval_samples_per_second': 44.545, 'eval_steps_per_second': 2.786, 'epoch': 5.68}
{'loss': 0.8912, 'learning_rate': 0.00011412742382271469, 'epoch': 5.71}
{'eval_loss': 0.6687281131744385, 'eval_acc': 0.8213598460551635, 'eval_runtime': 70.6555, 'eval_samples_per_second': 44.13, 'eval_steps_per_second': 2.76, 'epoch': 5.75}
{'loss': 0.8366, 'learning_rate': 0.00011523545706371193, 'epoch': 5.76}
{'loss': 0.9339, 'learning_rate': 0.00011634349030470914, 'epoch': 5.82}
{'eval_loss': 0.6527409553527832, 'eval_acc': 0.8255291853752406, 'eval_runtime': 70.3739, 'eval_samples_per_second': 44.306, 'eval_steps_per_second': 2.771, 'epoch': 5.82}
{'loss': 0.8554, 'learning_rate': 0.00011745152354570639, 'epoch': 5.87}
{'eval_loss': 0.637790858745575, 'eval_acc': 0.8248877485567672, 'eval_runtime': 70.2106, 'eval_samples_per_second': 44.409, 'eval_steps_per_second': 2.777, 'epoch': 5.89}
{'loss': 0.896, 'learning_rate': 0.0001185595567867036, 'epoch': 5.93}
{'eval_loss': 0.6137705445289612, 'eval_acc': 0.8332264271969211, 'eval_runtime': 69.8935, 'eval_samples_per_second': 44.611, 'eval_steps_per_second': 2.79, 'epoch': 5.95}
{'loss': 0.7732, 'learning_rate': 0.00011966759002770083, 'epoch': 5.98}
{'eval_loss': 0.6147500872612, 'eval_acc': 0.8361128928800513, 'eval_runtime': 69.9657, 'eval_samples_per_second': 44.565, 'eval_steps_per_second': 2.787, 'epoch': 6.02}
{'loss': 0.8195, 'learning_rate': 0.00012077562326869807, 'epoch': 6.04}
{'loss': 0.8514, 'learning_rate': 0.00012188365650969529, 'epoch': 6.09}
{'eval_loss': 0.5857102870941162, 'eval_acc': 0.8399615137908916, 'eval_runtime': 70.5384, 'eval_samples_per_second': 44.203, 'eval_steps_per_second': 2.764, 'epoch': 6.09}
{'loss': 0.7391, 'learning_rate': 0.00012299168975069252, 'epoch': 6.15}
{'eval_loss': 0.5808190703392029, 'eval_acc': 0.8454137267479154, 'eval_runtime': 70.4915, 'eval_samples_per_second': 44.232, 'eval_steps_per_second': 2.766, 'epoch': 6.16}
{'loss': 0.8699, 'learning_rate': 0.00012409972299168976, 'epoch': 6.2}
{'eval_loss': 0.5654028654098511, 'eval_acc': 0.8489416292495189, 'eval_runtime': 70.0285, 'eval_samples_per_second': 44.525, 'eval_steps_per_second': 2.785, 'epoch': 6.23}
{'loss': 0.7848, 'learning_rate': 0.000125207756232687, 'epoch': 6.26}
{'eval_loss': 0.5460951924324036, 'eval_acc': 0.8505452212957024, 'eval_runtime': 69.7983, 'eval_samples_per_second': 44.672, 'eval_steps_per_second': 2.794, 'epoch': 6.3}
{'loss': 0.7792, 'learning_rate': 0.0001263157894736842, 'epoch': 6.32}
{'loss': 0.7524, 'learning_rate': 0.00012742382271468145, 'epoch': 6.37}
{'eval_loss': 0.5419413447380066, 'eval_acc': 0.8505452212957024, 'eval_runtime': 70.4531, 'eval_samples_per_second': 44.256, 'eval_steps_per_second': 2.768, 'epoch': 6.37}
{'loss': 0.7445, 'learning_rate': 0.00012853185595567868, 'epoch': 6.43}
{'eval_loss': 0.5609758496284485, 'eval_acc': 0.8438101347017318, 'eval_runtime': 70.3296, 'eval_samples_per_second': 44.334, 'eval_steps_per_second': 2.773, 'epoch': 6.44}
{'loss': 0.8555, 'learning_rate': 0.00012963988919667592, 'epoch': 6.48}
{'eval_loss': 0.548288881778717, 'eval_acc': 0.8409236690186017, 'eval_runtime': 70.2529, 'eval_samples_per_second': 44.383, 'eval_steps_per_second': 2.776, 'epoch': 6.51}
{'loss': 0.6968, 'learning_rate': 0.00013074792243767313, 'epoch': 6.54}
{'eval_loss': 0.5239848494529724, 'eval_acc': 0.8588838999358563, 'eval_runtime': 69.6201, 'eval_samples_per_second': 44.786, 'eval_steps_per_second': 2.801, 'epoch': 6.58}
{'loss': 0.7221, 'learning_rate': 0.00013185595567867037, 'epoch': 6.59}
{'loss': 0.7799, 'learning_rate': 0.00013296398891966758, 'epoch': 6.65}
{'eval_loss': 0.5166738629341125, 'eval_acc': 0.86433611289288, 'eval_runtime': 70.5283, 'eval_samples_per_second': 44.209, 'eval_steps_per_second': 2.765, 'epoch': 6.65}
{'loss': 0.7663, 'learning_rate': 0.00013407202216066482, 'epoch': 6.7}
{'eval_loss': 0.5164525508880615, 'eval_acc': 0.8617703656189866, 'eval_runtime': 70.3391, 'eval_samples_per_second': 44.328, 'eval_steps_per_second': 2.772, 'epoch': 6.72}
{'loss': 0.7014, 'learning_rate': 0.00013518005540166206, 'epoch': 6.76}
{'eval_loss': 0.5060364007949829, 'eval_acc': 0.858242463117383, 'eval_runtime': 69.9293, 'eval_samples_per_second': 44.588, 'eval_steps_per_second': 2.789, 'epoch': 6.79}
{'loss': 0.6705, 'learning_rate': 0.0001362880886426593, 'epoch': 6.81}
{'eval_loss': 0.5108765959739685, 'eval_acc': 0.8428479794740218, 'eval_runtime': 70.5032, 'eval_samples_per_second': 44.225, 'eval_steps_per_second': 2.766, 'epoch': 6.85}
{'loss': 0.7426, 'learning_rate': 0.0001373961218836565, 'epoch': 6.87}
{'loss': 0.7189, 'learning_rate': 0.00013850415512465375, 'epoch': 6.92}
{'eval_loss': 0.4878512918949127, 'eval_acc': 0.8710711994868505, 'eval_runtime': 70.4585, 'eval_samples_per_second': 44.253, 'eval_steps_per_second': 2.768, 'epoch': 6.92}
{'loss': 0.6827, 'learning_rate': 0.00013961218836565096, 'epoch': 6.98}
{'eval_loss': 0.472475528717041, 'eval_acc': 0.8723540731237973, 'eval_runtime': 70.7631, 'eval_samples_per_second': 44.062, 'eval_steps_per_second': 2.756, 'epoch': 6.99}
{'loss': 0.7072, 'learning_rate': 0.00014072022160664823, 'epoch': 7.04}
{'eval_loss': 0.4695824086666107, 'eval_acc': 0.8691468890314304, 'eval_runtime': 70.4827, 'eval_samples_per_second': 44.238, 'eval_steps_per_second': 2.767, 'epoch': 7.06}
{'loss': 0.7146, 'learning_rate': 0.00014182825484764544, 'epoch': 7.09}
{'eval_loss': 0.45040223002433777, 'eval_acc': 0.8758819756254009, 'eval_runtime': 70.5351, 'eval_samples_per_second': 44.205, 'eval_steps_per_second': 2.765, 'epoch': 7.13}
{'loss': 0.6491, 'learning_rate': 0.00014293628808864265, 'epoch': 7.15}
{'loss': 0.6077, 'learning_rate': 0.0001440443213296399, 'epoch': 7.2}
{'eval_loss': 0.44753214716911316, 'eval_acc': 0.8803720333547146, 'eval_runtime': 70.1447, 'eval_samples_per_second': 44.451, 'eval_steps_per_second': 2.78, 'epoch': 7.2}
{'loss': 0.6654, 'learning_rate': 0.00014515235457063713, 'epoch': 7.26}
{'eval_loss': 0.45206892490386963, 'eval_acc': 0.876844130853111, 'eval_runtime': 69.7192, 'eval_samples_per_second': 44.722, 'eval_steps_per_second': 2.797, 'epoch': 7.27}
{'loss': 0.6336, 'learning_rate': 0.00014626038781163437, 'epoch': 7.31}
{'eval_loss': 0.4522123336791992, 'eval_acc': 0.8556767158434894, 'eval_runtime': 70.451, 'eval_samples_per_second': 44.258, 'eval_steps_per_second': 2.768, 'epoch': 7.34}
{'loss': 0.6784, 'learning_rate': 0.00014736842105263158, 'epoch': 7.37}
{'eval_loss': 0.4329601526260376, 'eval_acc': 0.8832584990378448, 'eval_runtime': 70.3892, 'eval_samples_per_second': 44.297, 'eval_steps_per_second': 2.77, 'epoch': 7.41}
{'loss': 0.6551, 'learning_rate': 0.00014847645429362882, 'epoch': 7.42}
{'loss': 0.6149, 'learning_rate': 0.00014958448753462603, 'epoch': 7.48}
{'eval_loss': 0.427068829536438, 'eval_acc': 0.8848620910840282, 'eval_runtime': 69.9196, 'eval_samples_per_second': 44.594, 'eval_steps_per_second': 2.789, 'epoch': 7.48}
{'loss': 0.6096, 'learning_rate': 0.00015069252077562327, 'epoch': 7.53}
{'eval_loss': 0.4221952557563782, 'eval_acc': 0.8864656831302117, 'eval_runtime': 70.5663, 'eval_samples_per_second': 44.185, 'eval_steps_per_second': 2.763, 'epoch': 7.55}
{'loss': 0.5941, 'learning_rate': 0.0001518005540166205, 'epoch': 7.59}
{'eval_loss': 0.40929126739501953, 'eval_acc': 0.8903143040410519, 'eval_runtime': 70.5442, 'eval_samples_per_second': 44.199, 'eval_steps_per_second': 2.764, 'epoch': 7.62}
{'loss': 0.5907, 'learning_rate': 0.00015290858725761775, 'epoch': 7.64}
{'eval_loss': 0.40388813614845276, 'eval_acc': 0.8932007697241822, 'eval_runtime': 70.1826, 'eval_samples_per_second': 44.427, 'eval_steps_per_second': 2.778, 'epoch': 7.69}
{'loss': 0.6066, 'learning_rate': 0.00015401662049861496, 'epoch': 7.7}
{'loss': 0.6295, 'learning_rate': 0.0001551246537396122, 'epoch': 7.76}
{'eval_loss': 0.3888668119907379, 'eval_acc': 0.8957665169980756, 'eval_runtime': 69.7746, 'eval_samples_per_second': 44.687, 'eval_steps_per_second': 2.795, 'epoch': 7.76}
{'loss': 0.5908, 'learning_rate': 0.00015623268698060943, 'epoch': 7.81}
{'eval_loss': 0.4097827076911926, 'eval_acc': 0.8838999358563181, 'eval_runtime': 70.572, 'eval_samples_per_second': 44.182, 'eval_steps_per_second': 2.763, 'epoch': 7.82}
{'loss': 0.5356, 'learning_rate': 0.00015734072022160667, 'epoch': 7.87}
{'eval_loss': 0.3769989311695099, 'eval_acc': 0.8989737010904426, 'eval_runtime': 70.2636, 'eval_samples_per_second': 44.376, 'eval_steps_per_second': 2.775, 'epoch': 7.89}
{'loss': 0.572, 'learning_rate': 0.00015844875346260388, 'epoch': 7.92}
{'eval_loss': 0.36519578099250793, 'eval_acc': 0.9057087876844131, 'eval_runtime': 70.1306, 'eval_samples_per_second': 44.46, 'eval_steps_per_second': 2.781, 'epoch': 7.96}
{'loss': 0.5769, 'learning_rate': 0.00015955678670360112, 'epoch': 7.98}
{'loss': 0.6036, 'learning_rate': 0.00016066481994459833, 'epoch': 8.03}
{'eval_loss': 0.37680286169052124, 'eval_acc': 0.8957665169980756, 'eval_runtime': 70.406, 'eval_samples_per_second': 44.286, 'eval_steps_per_second': 2.77, 'epoch': 8.03}
{'loss': 0.4873, 'learning_rate': 0.00016177285318559557, 'epoch': 8.09}
{'eval_loss': 0.38275057077407837, 'eval_acc': 0.8957665169980756, 'eval_runtime': 69.763, 'eval_samples_per_second': 44.694, 'eval_steps_per_second': 2.795, 'epoch': 8.1}
{'loss': 0.6053, 'learning_rate': 0.0001628808864265928, 'epoch': 8.14}
{'eval_loss': 0.35285139083862305, 'eval_acc': 0.9095574085952534, 'eval_runtime': 70.6511, 'eval_samples_per_second': 44.132, 'eval_steps_per_second': 2.76, 'epoch': 8.17}
{'loss': 0.5386, 'learning_rate': 0.00016398891966759005, 'epoch': 8.2}
{'eval_loss': 0.3476490378379822, 'eval_acc': 0.9092366901860167, 'eval_runtime': 70.2255, 'eval_samples_per_second': 44.4, 'eval_steps_per_second': 2.777, 'epoch': 8.24}
{'loss': 0.5286, 'learning_rate': 0.00016509695290858726, 'epoch': 8.25}
{'loss': 0.4886, 'learning_rate': 0.00016620498614958447, 'epoch': 8.31}
{'eval_loss': 0.35424742102622986, 'eval_acc': 0.9108402822322001, 'eval_runtime': 69.874, 'eval_samples_per_second': 44.623, 'eval_steps_per_second': 2.791, 'epoch': 8.31}
{'loss': 0.5755, 'learning_rate': 0.00016731301939058174, 'epoch': 8.37}
{'eval_loss': 0.34721454977989197, 'eval_acc': 0.90891597177678, 'eval_runtime': 69.9692, 'eval_samples_per_second': 44.562, 'eval_steps_per_second': 2.787, 'epoch': 8.38}
{'loss': 0.5453, 'learning_rate': 0.00016842105263157895, 'epoch': 8.42}
{'eval_loss': 0.3422369658946991, 'eval_acc': 0.9098781270044901, 'eval_runtime': 69.7118, 'eval_samples_per_second': 44.727, 'eval_steps_per_second': 2.797, 'epoch': 8.45}
{'loss': 0.5136, 'learning_rate': 0.0001695290858725762, 'epoch': 8.48}
{'eval_loss': 0.34293681383132935, 'eval_acc': 0.9108402822322001, 'eval_runtime': 70.4874, 'eval_samples_per_second': 44.235, 'eval_steps_per_second': 2.766, 'epoch': 8.52}
{'train_runtime': 20960.9556, 'train_samples_per_second': 110.358, 'train_steps_per_second': 1.722, 'train_loss': 2.224605118511169, 'epoch': 8.52}
{'test_loss': 0.18371745944023132, 'test_acc': 0.9559715264961771, 'test_runtime': 92.9622, 'test_samples_per_second': 40.802, 'test_steps_per_second': 2.56}
