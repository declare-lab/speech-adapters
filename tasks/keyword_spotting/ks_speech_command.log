Wav2Vec2ForSequenceClassification(
  (wav2vec2): Wav2Vec2Model(
    (feature_extractor): Wav2Vec2FeatureEncoder(
      (conv_layers): ModuleList(
        (0): Wav2Vec2LayerNormConvLayer(
          (conv): Conv1d(1, 512, kernel_size=(10,), stride=(5,))
          (layer_norm): LayerNorm((512,), eps=1e-05, elementwise_affine=True)
          (activation): GELUActivation()
        )
        (1): Wav2Vec2LayerNormConvLayer(
          (conv): Conv1d(512, 512, kernel_size=(3,), stride=(2,))
          (layer_norm): LayerNorm((512,), eps=1e-05, elementwise_affine=True)
          (activation): GELUActivation()
        )
        (2): Wav2Vec2LayerNormConvLayer(
          (conv): Conv1d(512, 512, kernel_size=(3,), stride=(2,))
          (layer_norm): LayerNorm((512,), eps=1e-05, elementwise_affine=True)
          (activation): GELUActivation()
        )
        (3): Wav2Vec2LayerNormConvLayer(
          (conv): Conv1d(512, 512, kernel_size=(3,), stride=(2,))
          (layer_norm): LayerNorm((512,), eps=1e-05, elementwise_affine=True)
          (activation): GELUActivation()
        )
        (4): Wav2Vec2LayerNormConvLayer(
          (conv): Conv1d(512, 512, kernel_size=(3,), stride=(2,))
          (layer_norm): LayerNorm((512,), eps=1e-05, elementwise_affine=True)
          (activation): GELUActivation()
        )
        (5): Wav2Vec2LayerNormConvLayer(
          (conv): Conv1d(512, 512, kernel_size=(2,), stride=(2,))
          (layer_norm): LayerNorm((512,), eps=1e-05, elementwise_affine=True)
          (activation): GELUActivation()
        )
        (6): Wav2Vec2LayerNormConvLayer(
          (conv): Conv1d(512, 512, kernel_size=(2,), stride=(2,))
          (layer_norm): LayerNorm((512,), eps=1e-05, elementwise_affine=True)
          (activation): GELUActivation()
        )
      )
    )
    (feature_projection): Wav2Vec2FeatureProjection(
      (layer_norm): LayerNorm((512,), eps=1e-05, elementwise_affine=True)
      (projection): Linear(in_features=512, out_features=1024, bias=True)
      (dropout): Dropout(p=0.05, inplace=False)
    )
    (encoder): Wav2Vec2EncoderStableLayerNorm(
      (pos_conv_embed): Wav2Vec2PositionalConvEmbedding(
        (conv): Conv1d(1024, 1024, kernel_size=(128,), stride=(1,), padding=(64,), groups=16)
        (padding): Wav2Vec2SamePadLayer()
        (activation): GELUActivation()
      )
      (layer_norm): LayerNorm((1024,), eps=1e-05, elementwise_affine=True)
      (dropout): Dropout(p=0.05, inplace=False)
      (layers): ModuleList(
        (0): Wav2Vec2EncoderLayerStableLayerNorm(
          (attention): Wav2Vec2Attention(
            (k_proj): Linear(in_features=1024, out_features=1024, bias=True)
            (v_proj): Linear(in_features=1024, out_features=1024, bias=True)
            (q_proj): Linear(in_features=1024, out_features=1024, bias=True)
            (out_proj): Linear(in_features=1024, out_features=1024, bias=True)
          )
          (dropout): Dropout(p=0.05, inplace=False)
          (layer_norm): LayerNorm((1024,), eps=1e-05, elementwise_affine=True)
          (feed_forward): Wav2Vec2FeedForward(
            (intermediate_dropout): Dropout(p=0.05, inplace=False)
            (intermediate_dense): Linear(in_features=1024, out_features=4096, bias=True)
            (intermediate_act_fn): GELUActivation()
            (output_dense): Linear(in_features=4096, out_features=1024, bias=True)
            (output_dropout): Dropout(p=0.05, inplace=False)
          )
          (final_layer_norm): LayerNorm((1024,), eps=1e-05, elementwise_affine=True)
          (adapterblock): AdapterBlock(
            (layer_norm1): LayerNorm((1024,), eps=1e-05, elementwise_affine=True)
            (conv1): Conv1d(1024, 512, kernel_size=(3,), stride=(1,), padding=same, groups=512, bias=False)
            (relu1): ReLU(inplace=True)
            (conv2): Conv1d(512, 512, kernel_size=(5,), stride=(1,), padding=same, groups=512, bias=False)
            (conv3): Conv1d(512, 1024, kernel_size=(3,), stride=(1,), padding=same, groups=512, bias=False)
            (se3): SELayer(
              (avg_pool): AdaptiveAvgPool1d(output_size=1)
              (fc): Sequential(
                (0): Linear(in_features=1024, out_features=64, bias=False)
                (1): ReLU(inplace=True)
                (2): Linear(in_features=64, out_features=1024, bias=False)
                (3): Sigmoid()
              )
            )
          )
        )
        (1): Wav2Vec2EncoderLayerStableLayerNorm(
          (attention): Wav2Vec2Attention(
            (k_proj): Linear(in_features=1024, out_features=1024, bias=True)
            (v_proj): Linear(in_features=1024, out_features=1024, bias=True)
            (q_proj): Linear(in_features=1024, out_features=1024, bias=True)
            (out_proj): Linear(in_features=1024, out_features=1024, bias=True)
          )
          (dropout): Dropout(p=0.05, inplace=False)
          (layer_norm): LayerNorm((1024,), eps=1e-05, elementwise_affine=True)
          (feed_forward): Wav2Vec2FeedForward(
            (intermediate_dropout): Dropout(p=0.05, inplace=False)
            (intermediate_dense): Linear(in_features=1024, out_features=4096, bias=True)
            (intermediate_act_fn): GELUActivation()
            (output_dense): Linear(in_features=4096, out_features=1024, bias=True)
            (output_dropout): Dropout(p=0.05, inplace=False)
          )
          (final_layer_norm): LayerNorm((1024,), eps=1e-05, elementwise_affine=True)
          (adapterblock): AdapterBlock(
            (layer_norm1): LayerNorm((1024,), eps=1e-05, elementwise_affine=True)
            (conv1): Conv1d(1024, 512, kernel_size=(3,), stride=(1,), padding=same, groups=512, bias=False)
            (relu1): ReLU(inplace=True)
            (conv2): Conv1d(512, 512, kernel_size=(5,), stride=(1,), padding=same, groups=512, bias=False)
            (conv3): Conv1d(512, 1024, kernel_size=(3,), stride=(1,), padding=same, groups=512, bias=False)
            (se3): SELayer(
              (avg_pool): AdaptiveAvgPool1d(output_size=1)
              (fc): Sequential(
                (0): Linear(in_features=1024, out_features=64, bias=False)
                (1): ReLU(inplace=True)
                (2): Linear(in_features=64, out_features=1024, bias=False)
                (3): Sigmoid()
              )
            )
          )
        )
        (2): Wav2Vec2EncoderLayerStableLayerNorm(
          (attention): Wav2Vec2Attention(
            (k_proj): Linear(in_features=1024, out_features=1024, bias=True)
            (v_proj): Linear(in_features=1024, out_features=1024, bias=True)
            (q_proj): Linear(in_features=1024, out_features=1024, bias=True)
            (out_proj): Linear(in_features=1024, out_features=1024, bias=True)
          )
          (dropout): Dropout(p=0.05, inplace=False)
          (layer_norm): LayerNorm((1024,), eps=1e-05, elementwise_affine=True)
          (feed_forward): Wav2Vec2FeedForward(
            (intermediate_dropout): Dropout(p=0.05, inplace=False)
            (intermediate_dense): Linear(in_features=1024, out_features=4096, bias=True)
            (intermediate_act_fn): GELUActivation()
            (output_dense): Linear(in_features=4096, out_features=1024, bias=True)
            (output_dropout): Dropout(p=0.05, inplace=False)
          )
          (final_layer_norm): LayerNorm((1024,), eps=1e-05, elementwise_affine=True)
          (adapterblock): AdapterBlock(
            (layer_norm1): LayerNorm((1024,), eps=1e-05, elementwise_affine=True)
            (conv1): Conv1d(1024, 512, kernel_size=(3,), stride=(1,), padding=same, groups=512, bias=False)
            (relu1): ReLU(inplace=True)
            (conv2): Conv1d(512, 512, kernel_size=(5,), stride=(1,), padding=same, groups=512, bias=False)
            (conv3): Conv1d(512, 1024, kernel_size=(3,), stride=(1,), padding=same, groups=512, bias=False)
            (se3): SELayer(
              (avg_pool): AdaptiveAvgPool1d(output_size=1)
              (fc): Sequential(
                (0): Linear(in_features=1024, out_features=64, bias=False)
                (1): ReLU(inplace=True)
                (2): Linear(in_features=64, out_features=1024, bias=False)
                (3): Sigmoid()
              )
            )
          )
        )
        (3): Wav2Vec2EncoderLayerStableLayerNorm(
          (attention): Wav2Vec2Attention(
            (k_proj): Linear(in_features=1024, out_features=1024, bias=True)
            (v_proj): Linear(in_features=1024, out_features=1024, bias=True)
            (q_proj): Linear(in_features=1024, out_features=1024, bias=True)
            (out_proj): Linear(in_features=1024, out_features=1024, bias=True)
          )
          (dropout): Dropout(p=0.05, inplace=False)
          (layer_norm): LayerNorm((1024,), eps=1e-05, elementwise_affine=True)
          (feed_forward): Wav2Vec2FeedForward(
            (intermediate_dropout): Dropout(p=0.05, inplace=False)
            (intermediate_dense): Linear(in_features=1024, out_features=4096, bias=True)
            (intermediate_act_fn): GELUActivation()
            (output_dense): Linear(in_features=4096, out_features=1024, bias=True)
            (output_dropout): Dropout(p=0.05, inplace=False)
          )
          (final_layer_norm): LayerNorm((1024,), eps=1e-05, elementwise_affine=True)
          (adapterblock): AdapterBlock(
            (layer_norm1): LayerNorm((1024,), eps=1e-05, elementwise_affine=True)
            (conv1): Conv1d(1024, 512, kernel_size=(3,), stride=(1,), padding=same, groups=512, bias=False)
            (relu1): ReLU(inplace=True)
            (conv2): Conv1d(512, 512, kernel_size=(5,), stride=(1,), padding=same, groups=512, bias=False)
            (conv3): Conv1d(512, 1024, kernel_size=(3,), stride=(1,), padding=same, groups=512, bias=False)
            (se3): SELayer(
              (avg_pool): AdaptiveAvgPool1d(output_size=1)
              (fc): Sequential(
                (0): Linear(in_features=1024, out_features=64, bias=False)
                (1): ReLU(inplace=True)
                (2): Linear(in_features=64, out_features=1024, bias=False)
                (3): Sigmoid()
              )
            )
          )
        )
        (4): Wav2Vec2EncoderLayerStableLayerNorm(
          (attention): Wav2Vec2Attention(
            (k_proj): Linear(in_features=1024, out_features=1024, bias=True)
            (v_proj): Linear(in_features=1024, out_features=1024, bias=True)
            (q_proj): Linear(in_features=1024, out_features=1024, bias=True)
            (out_proj): Linear(in_features=1024, out_features=1024, bias=True)
          )
          (dropout): Dropout(p=0.05, inplace=False)
          (layer_norm): LayerNorm((1024,), eps=1e-05, elementwise_affine=True)
          (feed_forward): Wav2Vec2FeedForward(
            (intermediate_dropout): Dropout(p=0.05, inplace=False)
            (intermediate_dense): Linear(in_features=1024, out_features=4096, bias=True)
            (intermediate_act_fn): GELUActivation()
            (output_dense): Linear(in_features=4096, out_features=1024, bias=True)
            (output_dropout): Dropout(p=0.05, inplace=False)
          )
          (final_layer_norm): LayerNorm((1024,), eps=1e-05, elementwise_affine=True)
          (adapterblock): AdapterBlock(
            (layer_norm1): LayerNorm((1024,), eps=1e-05, elementwise_affine=True)
            (conv1): Conv1d(1024, 512, kernel_size=(3,), stride=(1,), padding=same, groups=512, bias=False)
            (relu1): ReLU(inplace=True)
            (conv2): Conv1d(512, 512, kernel_size=(5,), stride=(1,), padding=same, groups=512, bias=False)
            (conv3): Conv1d(512, 1024, kernel_size=(3,), stride=(1,), padding=same, groups=512, bias=False)
            (se3): SELayer(
              (avg_pool): AdaptiveAvgPool1d(output_size=1)
              (fc): Sequential(
                (0): Linear(in_features=1024, out_features=64, bias=False)
                (1): ReLU(inplace=True)
                (2): Linear(in_features=64, out_features=1024, bias=False)
                (3): Sigmoid()
              )
            )
          )
        )
        (5): Wav2Vec2EncoderLayerStableLayerNorm(
          (attention): Wav2Vec2Attention(
            (k_proj): Linear(in_features=1024, out_features=1024, bias=True)
            (v_proj): Linear(in_features=1024, out_features=1024, bias=True)
            (q_proj): Linear(in_features=1024, out_features=1024, bias=True)
            (out_proj): Linear(in_features=1024, out_features=1024, bias=True)
          )
          (dropout): Dropout(p=0.05, inplace=False)
          (layer_norm): LayerNorm((1024,), eps=1e-05, elementwise_affine=True)
          (feed_forward): Wav2Vec2FeedForward(
            (intermediate_dropout): Dropout(p=0.05, inplace=False)
            (intermediate_dense): Linear(in_features=1024, out_features=4096, bias=True)
            (intermediate_act_fn): GELUActivation()
            (output_dense): Linear(in_features=4096, out_features=1024, bias=True)
            (output_dropout): Dropout(p=0.05, inplace=False)
          )
          (final_layer_norm): LayerNorm((1024,), eps=1e-05, elementwise_affine=True)
          (adapterblock): AdapterBlock(
            (layer_norm1): LayerNorm((1024,), eps=1e-05, elementwise_affine=True)
            (conv1): Conv1d(1024, 512, kernel_size=(3,), stride=(1,), padding=same, groups=512, bias=False)
            (relu1): ReLU(inplace=True)
            (conv2): Conv1d(512, 512, kernel_size=(5,), stride=(1,), padding=same, groups=512, bias=False)
            (conv3): Conv1d(512, 1024, kernel_size=(3,), stride=(1,), padding=same, groups=512, bias=False)
            (se3): SELayer(
              (avg_pool): AdaptiveAvgPool1d(output_size=1)
              (fc): Sequential(
                (0): Linear(in_features=1024, out_features=64, bias=False)
                (1): ReLU(inplace=True)
                (2): Linear(in_features=64, out_features=1024, bias=False)
                (3): Sigmoid()
              )
            )
          )
        )
        (6): Wav2Vec2EncoderLayerStableLayerNorm(
          (attention): Wav2Vec2Attention(
            (k_proj): Linear(in_features=1024, out_features=1024, bias=True)
            (v_proj): Linear(in_features=1024, out_features=1024, bias=True)
            (q_proj): Linear(in_features=1024, out_features=1024, bias=True)
            (out_proj): Linear(in_features=1024, out_features=1024, bias=True)
          )
          (dropout): Dropout(p=0.05, inplace=False)
          (layer_norm): LayerNorm((1024,), eps=1e-05, elementwise_affine=True)
          (feed_forward): Wav2Vec2FeedForward(
            (intermediate_dropout): Dropout(p=0.05, inplace=False)
            (intermediate_dense): Linear(in_features=1024, out_features=4096, bias=True)
            (intermediate_act_fn): GELUActivation()
            (output_dense): Linear(in_features=4096, out_features=1024, bias=True)
            (output_dropout): Dropout(p=0.05, inplace=False)
          )
          (final_layer_norm): LayerNorm((1024,), eps=1e-05, elementwise_affine=True)
          (adapterblock): AdapterBlock(
            (layer_norm1): LayerNorm((1024,), eps=1e-05, elementwise_affine=True)
            (conv1): Conv1d(1024, 512, kernel_size=(3,), stride=(1,), padding=same, groups=512, bias=False)
            (relu1): ReLU(inplace=True)
            (conv2): Conv1d(512, 512, kernel_size=(5,), stride=(1,), padding=same, groups=512, bias=False)
            (conv3): Conv1d(512, 1024, kernel_size=(3,), stride=(1,), padding=same, groups=512, bias=False)
            (se3): SELayer(
              (avg_pool): AdaptiveAvgPool1d(output_size=1)
              (fc): Sequential(
                (0): Linear(in_features=1024, out_features=64, bias=False)
                (1): ReLU(inplace=True)
                (2): Linear(in_features=64, out_features=1024, bias=False)
                (3): Sigmoid()
              )
            )
          )
        )
        (7): Wav2Vec2EncoderLayerStableLayerNorm(
          (attention): Wav2Vec2Attention(
            (k_proj): Linear(in_features=1024, out_features=1024, bias=True)
            (v_proj): Linear(in_features=1024, out_features=1024, bias=True)
            (q_proj): Linear(in_features=1024, out_features=1024, bias=True)
            (out_proj): Linear(in_features=1024, out_features=1024, bias=True)
          )
          (dropout): Dropout(p=0.05, inplace=False)
          (layer_norm): LayerNorm((1024,), eps=1e-05, elementwise_affine=True)
          (feed_forward): Wav2Vec2FeedForward(
            (intermediate_dropout): Dropout(p=0.05, inplace=False)
            (intermediate_dense): Linear(in_features=1024, out_features=4096, bias=True)
            (intermediate_act_fn): GELUActivation()
            (output_dense): Linear(in_features=4096, out_features=1024, bias=True)
            (output_dropout): Dropout(p=0.05, inplace=False)
          )
          (final_layer_norm): LayerNorm((1024,), eps=1e-05, elementwise_affine=True)
          (adapterblock): AdapterBlock(
            (layer_norm1): LayerNorm((1024,), eps=1e-05, elementwise_affine=True)
            (conv1): Conv1d(1024, 512, kernel_size=(3,), stride=(1,), padding=same, groups=512, bias=False)
            (relu1): ReLU(inplace=True)
            (conv2): Conv1d(512, 512, kernel_size=(5,), stride=(1,), padding=same, groups=512, bias=False)
            (conv3): Conv1d(512, 1024, kernel_size=(3,), stride=(1,), padding=same, groups=512, bias=False)
            (se3): SELayer(
              (avg_pool): AdaptiveAvgPool1d(output_size=1)
              (fc): Sequential(
                (0): Linear(in_features=1024, out_features=64, bias=False)
                (1): ReLU(inplace=True)
                (2): Linear(in_features=64, out_features=1024, bias=False)
                (3): Sigmoid()
              )
            )
          )
        )
        (8): Wav2Vec2EncoderLayerStableLayerNorm(
          (attention): Wav2Vec2Attention(
            (k_proj): Linear(in_features=1024, out_features=1024, bias=True)
            (v_proj): Linear(in_features=1024, out_features=1024, bias=True)
            (q_proj): Linear(in_features=1024, out_features=1024, bias=True)
            (out_proj): Linear(in_features=1024, out_features=1024, bias=True)
          )
          (dropout): Dropout(p=0.05, inplace=False)
          (layer_norm): LayerNorm((1024,), eps=1e-05, elementwise_affine=True)
          (feed_forward): Wav2Vec2FeedForward(
            (intermediate_dropout): Dropout(p=0.05, inplace=False)
            (intermediate_dense): Linear(in_features=1024, out_features=4096, bias=True)
            (intermediate_act_fn): GELUActivation()
            (output_dense): Linear(in_features=4096, out_features=1024, bias=True)
            (output_dropout): Dropout(p=0.05, inplace=False)
          )
          (final_layer_norm): LayerNorm((1024,), eps=1e-05, elementwise_affine=True)
          (adapterblock): AdapterBlock(
            (layer_norm1): LayerNorm((1024,), eps=1e-05, elementwise_affine=True)
            (conv1): Conv1d(1024, 512, kernel_size=(3,), stride=(1,), padding=same, groups=512, bias=False)
            (relu1): ReLU(inplace=True)
            (conv2): Conv1d(512, 512, kernel_size=(5,), stride=(1,), padding=same, groups=512, bias=False)
            (conv3): Conv1d(512, 1024, kernel_size=(3,), stride=(1,), padding=same, groups=512, bias=False)
            (se3): SELayer(
              (avg_pool): AdaptiveAvgPool1d(output_size=1)
              (fc): Sequential(
                (0): Linear(in_features=1024, out_features=64, bias=False)
                (1): ReLU(inplace=True)
                (2): Linear(in_features=64, out_features=1024, bias=False)
                (3): Sigmoid()
              )
            )
          )
        )
        (9): Wav2Vec2EncoderLayerStableLayerNorm(
          (attention): Wav2Vec2Attention(
            (k_proj): Linear(in_features=1024, out_features=1024, bias=True)
            (v_proj): Linear(in_features=1024, out_features=1024, bias=True)
            (q_proj): Linear(in_features=1024, out_features=1024, bias=True)
            (out_proj): Linear(in_features=1024, out_features=1024, bias=True)
          )
          (dropout): Dropout(p=0.05, inplace=False)
          (layer_norm): LayerNorm((1024,), eps=1e-05, elementwise_affine=True)
          (feed_forward): Wav2Vec2FeedForward(
            (intermediate_dropout): Dropout(p=0.05, inplace=False)
            (intermediate_dense): Linear(in_features=1024, out_features=4096, bias=True)
            (intermediate_act_fn): GELUActivation()
            (output_dense): Linear(in_features=4096, out_features=1024, bias=True)
            (output_dropout): Dropout(p=0.05, inplace=False)
          )
          (final_layer_norm): LayerNorm((1024,), eps=1e-05, elementwise_affine=True)
          (adapterblock): AdapterBlock(
            (layer_norm1): LayerNorm((1024,), eps=1e-05, elementwise_affine=True)
            (conv1): Conv1d(1024, 512, kernel_size=(3,), stride=(1,), padding=same, groups=512, bias=False)
            (relu1): ReLU(inplace=True)
            (conv2): Conv1d(512, 512, kernel_size=(5,), stride=(1,), padding=same, groups=512, bias=False)
            (conv3): Conv1d(512, 1024, kernel_size=(3,), stride=(1,), padding=same, groups=512, bias=False)
            (se3): SELayer(
              (avg_pool): AdaptiveAvgPool1d(output_size=1)
              (fc): Sequential(
                (0): Linear(in_features=1024, out_features=64, bias=False)
                (1): ReLU(inplace=True)
                (2): Linear(in_features=64, out_features=1024, bias=False)
                (3): Sigmoid()
              )
            )
          )
        )
        (10): Wav2Vec2EncoderLayerStableLayerNorm(
          (attention): Wav2Vec2Attention(
            (k_proj): Linear(in_features=1024, out_features=1024, bias=True)
            (v_proj): Linear(in_features=1024, out_features=1024, bias=True)
            (q_proj): Linear(in_features=1024, out_features=1024, bias=True)
            (out_proj): Linear(in_features=1024, out_features=1024, bias=True)
          )
          (dropout): Dropout(p=0.05, inplace=False)
          (layer_norm): LayerNorm((1024,), eps=1e-05, elementwise_affine=True)
          (feed_forward): Wav2Vec2FeedForward(
            (intermediate_dropout): Dropout(p=0.05, inplace=False)
            (intermediate_dense): Linear(in_features=1024, out_features=4096, bias=True)
            (intermediate_act_fn): GELUActivation()
            (output_dense): Linear(in_features=4096, out_features=1024, bias=True)
            (output_dropout): Dropout(p=0.05, inplace=False)
          )
          (final_layer_norm): LayerNorm((1024,), eps=1e-05, elementwise_affine=True)
          (adapterblock): AdapterBlock(
            (layer_norm1): LayerNorm((1024,), eps=1e-05, elementwise_affine=True)
            (conv1): Conv1d(1024, 512, kernel_size=(3,), stride=(1,), padding=same, groups=512, bias=False)
            (relu1): ReLU(inplace=True)
            (conv2): Conv1d(512, 512, kernel_size=(5,), stride=(1,), padding=same, groups=512, bias=False)
            (conv3): Conv1d(512, 1024, kernel_size=(3,), stride=(1,), padding=same, groups=512, bias=False)
            (se3): SELayer(
              (avg_pool): AdaptiveAvgPool1d(output_size=1)
              (fc): Sequential(
                (0): Linear(in_features=1024, out_features=64, bias=False)
                (1): ReLU(inplace=True)
                (2): Linear(in_features=64, out_features=1024, bias=False)
                (3): Sigmoid()
              )
            )
          )
        )
        (11): Wav2Vec2EncoderLayerStableLayerNorm(
          (attention): Wav2Vec2Attention(
            (k_proj): Linear(in_features=1024, out_features=1024, bias=True)
            (v_proj): Linear(in_features=1024, out_features=1024, bias=True)
            (q_proj): Linear(in_features=1024, out_features=1024, bias=True)
            (out_proj): Linear(in_features=1024, out_features=1024, bias=True)
          )
          (dropout): Dropout(p=0.05, inplace=False)
          (layer_norm): LayerNorm((1024,), eps=1e-05, elementwise_affine=True)
          (feed_forward): Wav2Vec2FeedForward(
            (intermediate_dropout): Dropout(p=0.05, inplace=False)
            (intermediate_dense): Linear(in_features=1024, out_features=4096, bias=True)
            (intermediate_act_fn): GELUActivation()
            (output_dense): Linear(in_features=4096, out_features=1024, bias=True)
            (output_dropout): Dropout(p=0.05, inplace=False)
          )
          (final_layer_norm): LayerNorm((1024,), eps=1e-05, elementwise_affine=True)
          (adapterblock): AdapterBlock(
            (layer_norm1): LayerNorm((1024,), eps=1e-05, elementwise_affine=True)
            (conv1): Conv1d(1024, 512, kernel_size=(3,), stride=(1,), padding=same, groups=512, bias=False)
            (relu1): ReLU(inplace=True)
            (conv2): Conv1d(512, 512, kernel_size=(5,), stride=(1,), padding=same, groups=512, bias=False)
            (conv3): Conv1d(512, 1024, kernel_size=(3,), stride=(1,), padding=same, groups=512, bias=False)
            (se3): SELayer(
              (avg_pool): AdaptiveAvgPool1d(output_size=1)
              (fc): Sequential(
                (0): Linear(in_features=1024, out_features=64, bias=False)
                (1): ReLU(inplace=True)
                (2): Linear(in_features=64, out_features=1024, bias=False)
                (3): Sigmoid()
              )
            )
          )
        )
        (12): Wav2Vec2EncoderLayerStableLayerNorm(
          (attention): Wav2Vec2Attention(
            (k_proj): Linear(in_features=1024, out_features=1024, bias=True)
            (v_proj): Linear(in_features=1024, out_features=1024, bias=True)
            (q_proj): Linear(in_features=1024, out_features=1024, bias=True)
            (out_proj): Linear(in_features=1024, out_features=1024, bias=True)
          )
          (dropout): Dropout(p=0.05, inplace=False)
          (layer_norm): LayerNorm((1024,), eps=1e-05, elementwise_affine=True)
          (feed_forward): Wav2Vec2FeedForward(
            (intermediate_dropout): Dropout(p=0.05, inplace=False)
            (intermediate_dense): Linear(in_features=1024, out_features=4096, bias=True)
            (intermediate_act_fn): GELUActivation()
            (output_dense): Linear(in_features=4096, out_features=1024, bias=True)
            (output_dropout): Dropout(p=0.05, inplace=False)
          )
          (final_layer_norm): LayerNorm((1024,), eps=1e-05, elementwise_affine=True)
          (adapterblock): AdapterBlock(
            (layer_norm1): LayerNorm((1024,), eps=1e-05, elementwise_affine=True)
            (conv1): Conv1d(1024, 512, kernel_size=(3,), stride=(1,), padding=same, groups=512, bias=False)
            (relu1): ReLU(inplace=True)
            (conv2): Conv1d(512, 512, kernel_size=(5,), stride=(1,), padding=same, groups=512, bias=False)
            (conv3): Conv1d(512, 1024, kernel_size=(3,), stride=(1,), padding=same, groups=512, bias=False)
            (se3): SELayer(
              (avg_pool): AdaptiveAvgPool1d(output_size=1)
              (fc): Sequential(
                (0): Linear(in_features=1024, out_features=64, bias=False)
                (1): ReLU(inplace=True)
                (2): Linear(in_features=64, out_features=1024, bias=False)
                (3): Sigmoid()
              )
            )
          )
        )
        (13): Wav2Vec2EncoderLayerStableLayerNorm(
          (attention): Wav2Vec2Attention(
            (k_proj): Linear(in_features=1024, out_features=1024, bias=True)
            (v_proj): Linear(in_features=1024, out_features=1024, bias=True)
            (q_proj): Linear(in_features=1024, out_features=1024, bias=True)
            (out_proj): Linear(in_features=1024, out_features=1024, bias=True)
          )
          (dropout): Dropout(p=0.05, inplace=False)
          (layer_norm): LayerNorm((1024,), eps=1e-05, elementwise_affine=True)
          (feed_forward): Wav2Vec2FeedForward(
            (intermediate_dropout): Dropout(p=0.05, inplace=False)
            (intermediate_dense): Linear(in_features=1024, out_features=4096, bias=True)
            (intermediate_act_fn): GELUActivation()
            (output_dense): Linear(in_features=4096, out_features=1024, bias=True)
            (output_dropout): Dropout(p=0.05, inplace=False)
          )
          (final_layer_norm): LayerNorm((1024,), eps=1e-05, elementwise_affine=True)
          (adapterblock): AdapterBlock(
            (layer_norm1): LayerNorm((1024,), eps=1e-05, elementwise_affine=True)
            (conv1): Conv1d(1024, 512, kernel_size=(3,), stride=(1,), padding=same, groups=512, bias=False)
            (relu1): ReLU(inplace=True)
            (conv2): Conv1d(512, 512, kernel_size=(5,), stride=(1,), padding=same, groups=512, bias=False)
            (conv3): Conv1d(512, 1024, kernel_size=(3,), stride=(1,), padding=same, groups=512, bias=False)
            (se3): SELayer(
              (avg_pool): AdaptiveAvgPool1d(output_size=1)
              (fc): Sequential(
                (0): Linear(in_features=1024, out_features=64, bias=False)
                (1): ReLU(inplace=True)
                (2): Linear(in_features=64, out_features=1024, bias=False)
                (3): Sigmoid()
              )
            )
          )
        )
        (14): Wav2Vec2EncoderLayerStableLayerNorm(
          (attention): Wav2Vec2Attention(
            (k_proj): Linear(in_features=1024, out_features=1024, bias=True)
            (v_proj): Linear(in_features=1024, out_features=1024, bias=True)
            (q_proj): Linear(in_features=1024, out_features=1024, bias=True)
            (out_proj): Linear(in_features=1024, out_features=1024, bias=True)
          )
          (dropout): Dropout(p=0.05, inplace=False)
          (layer_norm): LayerNorm((1024,), eps=1e-05, elementwise_affine=True)
          (feed_forward): Wav2Vec2FeedForward(
            (intermediate_dropout): Dropout(p=0.05, inplace=False)
            (intermediate_dense): Linear(in_features=1024, out_features=4096, bias=True)
            (intermediate_act_fn): GELUActivation()
            (output_dense): Linear(in_features=4096, out_features=1024, bias=True)
            (output_dropout): Dropout(p=0.05, inplace=False)
          )
          (final_layer_norm): LayerNorm((1024,), eps=1e-05, elementwise_affine=True)
          (adapterblock): AdapterBlock(
            (layer_norm1): LayerNorm((1024,), eps=1e-05, elementwise_affine=True)
            (conv1): Conv1d(1024, 512, kernel_size=(3,), stride=(1,), padding=same, groups=512, bias=False)
            (relu1): ReLU(inplace=True)
            (conv2): Conv1d(512, 512, kernel_size=(5,), stride=(1,), padding=same, groups=512, bias=False)
            (conv3): Conv1d(512, 1024, kernel_size=(3,), stride=(1,), padding=same, groups=512, bias=False)
            (se3): SELayer(
              (avg_pool): AdaptiveAvgPool1d(output_size=1)
              (fc): Sequential(
                (0): Linear(in_features=1024, out_features=64, bias=False)
                (1): ReLU(inplace=True)
                (2): Linear(in_features=64, out_features=1024, bias=False)
                (3): Sigmoid()
              )
            )
          )
        )
        (15): Wav2Vec2EncoderLayerStableLayerNorm(
          (attention): Wav2Vec2Attention(
            (k_proj): Linear(in_features=1024, out_features=1024, bias=True)
            (v_proj): Linear(in_features=1024, out_features=1024, bias=True)
            (q_proj): Linear(in_features=1024, out_features=1024, bias=True)
            (out_proj): Linear(in_features=1024, out_features=1024, bias=True)
          )
          (dropout): Dropout(p=0.05, inplace=False)
          (layer_norm): LayerNorm((1024,), eps=1e-05, elementwise_affine=True)
          (feed_forward): Wav2Vec2FeedForward(
            (intermediate_dropout): Dropout(p=0.05, inplace=False)
            (intermediate_dense): Linear(in_features=1024, out_features=4096, bias=True)
            (intermediate_act_fn): GELUActivation()
            (output_dense): Linear(in_features=4096, out_features=1024, bias=True)
            (output_dropout): Dropout(p=0.05, inplace=False)
          )
          (final_layer_norm): LayerNorm((1024,), eps=1e-05, elementwise_affine=True)
          (adapterblock): AdapterBlock(
            (layer_norm1): LayerNorm((1024,), eps=1e-05, elementwise_affine=True)
            (conv1): Conv1d(1024, 512, kernel_size=(3,), stride=(1,), padding=same, groups=512, bias=False)
            (relu1): ReLU(inplace=True)
            (conv2): Conv1d(512, 512, kernel_size=(5,), stride=(1,), padding=same, groups=512, bias=False)
            (conv3): Conv1d(512, 1024, kernel_size=(3,), stride=(1,), padding=same, groups=512, bias=False)
            (se3): SELayer(
              (avg_pool): AdaptiveAvgPool1d(output_size=1)
              (fc): Sequential(
                (0): Linear(in_features=1024, out_features=64, bias=False)
                (1): ReLU(inplace=True)
                (2): Linear(in_features=64, out_features=1024, bias=False)
                (3): Sigmoid()
              )
            )
          )
        )
        (16): Wav2Vec2EncoderLayerStableLayerNorm(
          (attention): Wav2Vec2Attention(
            (k_proj): Linear(in_features=1024, out_features=1024, bias=True)
            (v_proj): Linear(in_features=1024, out_features=1024, bias=True)
            (q_proj): Linear(in_features=1024, out_features=1024, bias=True)
            (out_proj): Linear(in_features=1024, out_features=1024, bias=True)
          )
          (dropout): Dropout(p=0.05, inplace=False)
          (layer_norm): LayerNorm((1024,), eps=1e-05, elementwise_affine=True)
          (feed_forward): Wav2Vec2FeedForward(
            (intermediate_dropout): Dropout(p=0.05, inplace=False)
            (intermediate_dense): Linear(in_features=1024, out_features=4096, bias=True)
            (intermediate_act_fn): GELUActivation()
            (output_dense): Linear(in_features=4096, out_features=1024, bias=True)
            (output_dropout): Dropout(p=0.05, inplace=False)
          )
          (final_layer_norm): LayerNorm((1024,), eps=1e-05, elementwise_affine=True)
          (adapterblock): AdapterBlock(
            (layer_norm1): LayerNorm((1024,), eps=1e-05, elementwise_affine=True)
            (conv1): Conv1d(1024, 512, kernel_size=(3,), stride=(1,), padding=same, groups=512, bias=False)
            (relu1): ReLU(inplace=True)
            (conv2): Conv1d(512, 512, kernel_size=(5,), stride=(1,), padding=same, groups=512, bias=False)
            (conv3): Conv1d(512, 1024, kernel_size=(3,), stride=(1,), padding=same, groups=512, bias=False)
            (se3): SELayer(
              (avg_pool): AdaptiveAvgPool1d(output_size=1)
              (fc): Sequential(
                (0): Linear(in_features=1024, out_features=64, bias=False)
                (1): ReLU(inplace=True)
                (2): Linear(in_features=64, out_features=1024, bias=False)
                (3): Sigmoid()
              )
            )
          )
        )
        (17): Wav2Vec2EncoderLayerStableLayerNorm(
          (attention): Wav2Vec2Attention(
            (k_proj): Linear(in_features=1024, out_features=1024, bias=True)
            (v_proj): Linear(in_features=1024, out_features=1024, bias=True)
            (q_proj): Linear(in_features=1024, out_features=1024, bias=True)
            (out_proj): Linear(in_features=1024, out_features=1024, bias=True)
          )
          (dropout): Dropout(p=0.05, inplace=False)
          (layer_norm): LayerNorm((1024,), eps=1e-05, elementwise_affine=True)
          (feed_forward): Wav2Vec2FeedForward(
            (intermediate_dropout): Dropout(p=0.05, inplace=False)
            (intermediate_dense): Linear(in_features=1024, out_features=4096, bias=True)
            (intermediate_act_fn): GELUActivation()
            (output_dense): Linear(in_features=4096, out_features=1024, bias=True)
            (output_dropout): Dropout(p=0.05, inplace=False)
          )
          (final_layer_norm): LayerNorm((1024,), eps=1e-05, elementwise_affine=True)
          (adapterblock): AdapterBlock(
            (layer_norm1): LayerNorm((1024,), eps=1e-05, elementwise_affine=True)
            (conv1): Conv1d(1024, 512, kernel_size=(3,), stride=(1,), padding=same, groups=512, bias=False)
            (relu1): ReLU(inplace=True)
            (conv2): Conv1d(512, 512, kernel_size=(5,), stride=(1,), padding=same, groups=512, bias=False)
            (conv3): Conv1d(512, 1024, kernel_size=(3,), stride=(1,), padding=same, groups=512, bias=False)
            (se3): SELayer(
              (avg_pool): AdaptiveAvgPool1d(output_size=1)
              (fc): Sequential(
                (0): Linear(in_features=1024, out_features=64, bias=False)
                (1): ReLU(inplace=True)
                (2): Linear(in_features=64, out_features=1024, bias=False)
                (3): Sigmoid()
              )
            )
          )
        )
        (18): Wav2Vec2EncoderLayerStableLayerNorm(
          (attention): Wav2Vec2Attention(
            (k_proj): Linear(in_features=1024, out_features=1024, bias=True)
            (v_proj): Linear(in_features=1024, out_features=1024, bias=True)
            (q_proj): Linear(in_features=1024, out_features=1024, bias=True)
            (out_proj): Linear(in_features=1024, out_features=1024, bias=True)
          )
          (dropout): Dropout(p=0.05, inplace=False)
          (layer_norm): LayerNorm((1024,), eps=1e-05, elementwise_affine=True)
          (feed_forward): Wav2Vec2FeedForward(
            (intermediate_dropout): Dropout(p=0.05, inplace=False)
            (intermediate_dense): Linear(in_features=1024, out_features=4096, bias=True)
            (intermediate_act_fn): GELUActivation()
            (output_dense): Linear(in_features=4096, out_features=1024, bias=True)
            (output_dropout): Dropout(p=0.05, inplace=False)
          )
          (final_layer_norm): LayerNorm((1024,), eps=1e-05, elementwise_affine=True)
          (adapterblock): AdapterBlock(
            (layer_norm1): LayerNorm((1024,), eps=1e-05, elementwise_affine=True)
            (conv1): Conv1d(1024, 512, kernel_size=(3,), stride=(1,), padding=same, groups=512, bias=False)
            (relu1): ReLU(inplace=True)
            (conv2): Conv1d(512, 512, kernel_size=(5,), stride=(1,), padding=same, groups=512, bias=False)
            (conv3): Conv1d(512, 1024, kernel_size=(3,), stride=(1,), padding=same, groups=512, bias=False)
            (se3): SELayer(
              (avg_pool): AdaptiveAvgPool1d(output_size=1)
              (fc): Sequential(
                (0): Linear(in_features=1024, out_features=64, bias=False)
                (1): ReLU(inplace=True)
                (2): Linear(in_features=64, out_features=1024, bias=False)
                (3): Sigmoid()
              )
            )
          )
        )
        (19): Wav2Vec2EncoderLayerStableLayerNorm(
          (attention): Wav2Vec2Attention(
            (k_proj): Linear(in_features=1024, out_features=1024, bias=True)
            (v_proj): Linear(in_features=1024, out_features=1024, bias=True)
            (q_proj): Linear(in_features=1024, out_features=1024, bias=True)
            (out_proj): Linear(in_features=1024, out_features=1024, bias=True)
          )
          (dropout): Dropout(p=0.05, inplace=False)
          (layer_norm): LayerNorm((1024,), eps=1e-05, elementwise_affine=True)
          (feed_forward): Wav2Vec2FeedForward(
            (intermediate_dropout): Dropout(p=0.05, inplace=False)
            (intermediate_dense): Linear(in_features=1024, out_features=4096, bias=True)
            (intermediate_act_fn): GELUActivation()
            (output_dense): Linear(in_features=4096, out_features=1024, bias=True)
            (output_dropout): Dropout(p=0.05, inplace=False)
          )
          (final_layer_norm): LayerNorm((1024,), eps=1e-05, elementwise_affine=True)
          (adapterblock): AdapterBlock(
            (layer_norm1): LayerNorm((1024,), eps=1e-05, elementwise_affine=True)
            (conv1): Conv1d(1024, 512, kernel_size=(3,), stride=(1,), padding=same, groups=512, bias=False)
            (relu1): ReLU(inplace=True)
            (conv2): Conv1d(512, 512, kernel_size=(5,), stride=(1,), padding=same, groups=512, bias=False)
            (conv3): Conv1d(512, 1024, kernel_size=(3,), stride=(1,), padding=same, groups=512, bias=False)
            (se3): SELayer(
              (avg_pool): AdaptiveAvgPool1d(output_size=1)
              (fc): Sequential(
                (0): Linear(in_features=1024, out_features=64, bias=False)
                (1): ReLU(inplace=True)
                (2): Linear(in_features=64, out_features=1024, bias=False)
                (3): Sigmoid()
              )
            )
          )
        )
        (20): Wav2Vec2EncoderLayerStableLayerNorm(
          (attention): Wav2Vec2Attention(
            (k_proj): Linear(in_features=1024, out_features=1024, bias=True)
            (v_proj): Linear(in_features=1024, out_features=1024, bias=True)
            (q_proj): Linear(in_features=1024, out_features=1024, bias=True)
            (out_proj): Linear(in_features=1024, out_features=1024, bias=True)
          )
          (dropout): Dropout(p=0.05, inplace=False)
          (layer_norm): LayerNorm((1024,), eps=1e-05, elementwise_affine=True)
          (feed_forward): Wav2Vec2FeedForward(
            (intermediate_dropout): Dropout(p=0.05, inplace=False)
            (intermediate_dense): Linear(in_features=1024, out_features=4096, bias=True)
            (intermediate_act_fn): GELUActivation()
            (output_dense): Linear(in_features=4096, out_features=1024, bias=True)
            (output_dropout): Dropout(p=0.05, inplace=False)
          )
          (final_layer_norm): LayerNorm((1024,), eps=1e-05, elementwise_affine=True)
          (adapterblock): AdapterBlock(
            (layer_norm1): LayerNorm((1024,), eps=1e-05, elementwise_affine=True)
            (conv1): Conv1d(1024, 512, kernel_size=(3,), stride=(1,), padding=same, groups=512, bias=False)
            (relu1): ReLU(inplace=True)
            (conv2): Conv1d(512, 512, kernel_size=(5,), stride=(1,), padding=same, groups=512, bias=False)
            (conv3): Conv1d(512, 1024, kernel_size=(3,), stride=(1,), padding=same, groups=512, bias=False)
            (se3): SELayer(
              (avg_pool): AdaptiveAvgPool1d(output_size=1)
              (fc): Sequential(
                (0): Linear(in_features=1024, out_features=64, bias=False)
                (1): ReLU(inplace=True)
                (2): Linear(in_features=64, out_features=1024, bias=False)
                (3): Sigmoid()
              )
            )
          )
        )
        (21): Wav2Vec2EncoderLayerStableLayerNorm(
          (attention): Wav2Vec2Attention(
            (k_proj): Linear(in_features=1024, out_features=1024, bias=True)
            (v_proj): Linear(in_features=1024, out_features=1024, bias=True)
            (q_proj): Linear(in_features=1024, out_features=1024, bias=True)
            (out_proj): Linear(in_features=1024, out_features=1024, bias=True)
          )
          (dropout): Dropout(p=0.05, inplace=False)
          (layer_norm): LayerNorm((1024,), eps=1e-05, elementwise_affine=True)
          (feed_forward): Wav2Vec2FeedForward(
            (intermediate_dropout): Dropout(p=0.05, inplace=False)
            (intermediate_dense): Linear(in_features=1024, out_features=4096, bias=True)
            (intermediate_act_fn): GELUActivation()
            (output_dense): Linear(in_features=4096, out_features=1024, bias=True)
            (output_dropout): Dropout(p=0.05, inplace=False)
          )
          (final_layer_norm): LayerNorm((1024,), eps=1e-05, elementwise_affine=True)
          (adapterblock): AdapterBlock(
            (layer_norm1): LayerNorm((1024,), eps=1e-05, elementwise_affine=True)
            (conv1): Conv1d(1024, 512, kernel_size=(3,), stride=(1,), padding=same, groups=512, bias=False)
            (relu1): ReLU(inplace=True)
            (conv2): Conv1d(512, 512, kernel_size=(5,), stride=(1,), padding=same, groups=512, bias=False)
            (conv3): Conv1d(512, 1024, kernel_size=(3,), stride=(1,), padding=same, groups=512, bias=False)
            (se3): SELayer(
              (avg_pool): AdaptiveAvgPool1d(output_size=1)
              (fc): Sequential(
                (0): Linear(in_features=1024, out_features=64, bias=False)
                (1): ReLU(inplace=True)
                (2): Linear(in_features=64, out_features=1024, bias=False)
                (3): Sigmoid()
              )
            )
          )
        )
        (22): Wav2Vec2EncoderLayerStableLayerNorm(
          (attention): Wav2Vec2Attention(
            (k_proj): Linear(in_features=1024, out_features=1024, bias=True)
            (v_proj): Linear(in_features=1024, out_features=1024, bias=True)
            (q_proj): Linear(in_features=1024, out_features=1024, bias=True)
            (out_proj): Linear(in_features=1024, out_features=1024, bias=True)
          )
          (dropout): Dropout(p=0.05, inplace=False)
          (layer_norm): LayerNorm((1024,), eps=1e-05, elementwise_affine=True)
          (feed_forward): Wav2Vec2FeedForward(
            (intermediate_dropout): Dropout(p=0.05, inplace=False)
            (intermediate_dense): Linear(in_features=1024, out_features=4096, bias=True)
            (intermediate_act_fn): GELUActivation()
            (output_dense): Linear(in_features=4096, out_features=1024, bias=True)
            (output_dropout): Dropout(p=0.05, inplace=False)
          )
          (final_layer_norm): LayerNorm((1024,), eps=1e-05, elementwise_affine=True)
          (adapterblock): AdapterBlock(
            (layer_norm1): LayerNorm((1024,), eps=1e-05, elementwise_affine=True)
            (conv1): Conv1d(1024, 512, kernel_size=(3,), stride=(1,), padding=same, groups=512, bias=False)
            (relu1): ReLU(inplace=True)
            (conv2): Conv1d(512, 512, kernel_size=(5,), stride=(1,), padding=same, groups=512, bias=False)
            (conv3): Conv1d(512, 1024, kernel_size=(3,), stride=(1,), padding=same, groups=512, bias=False)
            (se3): SELayer(
              (avg_pool): AdaptiveAvgPool1d(output_size=1)
              (fc): Sequential(
                (0): Linear(in_features=1024, out_features=64, bias=False)
                (1): ReLU(inplace=True)
                (2): Linear(in_features=64, out_features=1024, bias=False)
                (3): Sigmoid()
              )
            )
          )
        )
        (23): Wav2Vec2EncoderLayerStableLayerNorm(
          (attention): Wav2Vec2Attention(
            (k_proj): Linear(in_features=1024, out_features=1024, bias=True)
            (v_proj): Linear(in_features=1024, out_features=1024, bias=True)
            (q_proj): Linear(in_features=1024, out_features=1024, bias=True)
            (out_proj): Linear(in_features=1024, out_features=1024, bias=True)
          )
          (dropout): Dropout(p=0.05, inplace=False)
          (layer_norm): LayerNorm((1024,), eps=1e-05, elementwise_affine=True)
          (feed_forward): Wav2Vec2FeedForward(
            (intermediate_dropout): Dropout(p=0.05, inplace=False)
            (intermediate_dense): Linear(in_features=1024, out_features=4096, bias=True)
            (intermediate_act_fn): GELUActivation()
            (output_dense): Linear(in_features=4096, out_features=1024, bias=True)
            (output_dropout): Dropout(p=0.05, inplace=False)
          )
          (final_layer_norm): LayerNorm((1024,), eps=1e-05, elementwise_affine=True)
          (adapterblock): AdapterBlock(
            (layer_norm1): LayerNorm((1024,), eps=1e-05, elementwise_affine=True)
            (conv1): Conv1d(1024, 512, kernel_size=(3,), stride=(1,), padding=same, groups=512, bias=False)
            (relu1): ReLU(inplace=True)
            (conv2): Conv1d(512, 512, kernel_size=(5,), stride=(1,), padding=same, groups=512, bias=False)
            (conv3): Conv1d(512, 1024, kernel_size=(3,), stride=(1,), padding=same, groups=512, bias=False)
            (se3): SELayer(
              (avg_pool): AdaptiveAvgPool1d(output_size=1)
              (fc): Sequential(
                (0): Linear(in_features=1024, out_features=64, bias=False)
                (1): ReLU(inplace=True)
                (2): Linear(in_features=64, out_features=1024, bias=False)
                (3): Sigmoid()
              )
            )
          )
        )
      )
    )
  )
  (projector): Linear(in_features=1024, out_features=256, bias=True)
  (classifier): Linear(in_features=256, out_features=11, bias=True)
)

 #Train: 33724, #Valid: 4076, #Test: 4474 
 #Train Max len: 16000, #Valid Max len: 16000, #Test Max len: 16000 

------>>> Trainable params(before freeze): 319107723
------>>> Trainable params(after  freeze): 3669003
wav2vec2.encoder.layers.0.adapterblock.layer_norm1.weight True torch.Size([1024])
wav2vec2.encoder.layers.0.adapterblock.layer_norm1.bias True torch.Size([1024])
wav2vec2.encoder.layers.0.adapterblock.conv1.weight True torch.Size([512, 2, 3])
wav2vec2.encoder.layers.0.adapterblock.conv2.weight True torch.Size([512, 1, 5])
wav2vec2.encoder.layers.0.adapterblock.conv3.weight True torch.Size([1024, 1, 3])
wav2vec2.encoder.layers.0.adapterblock.se3.fc.0.weight True torch.Size([64, 1024])
wav2vec2.encoder.layers.0.adapterblock.se3.fc.2.weight True torch.Size([1024, 64])
wav2vec2.encoder.layers.1.adapterblock.layer_norm1.weight True torch.Size([1024])
wav2vec2.encoder.layers.1.adapterblock.layer_norm1.bias True torch.Size([1024])
wav2vec2.encoder.layers.1.adapterblock.conv1.weight True torch.Size([512, 2, 3])
wav2vec2.encoder.layers.1.adapterblock.conv2.weight True torch.Size([512, 1, 5])
wav2vec2.encoder.layers.1.adapterblock.conv3.weight True torch.Size([1024, 1, 3])
wav2vec2.encoder.layers.1.adapterblock.se3.fc.0.weight True torch.Size([64, 1024])
wav2vec2.encoder.layers.1.adapterblock.se3.fc.2.weight True torch.Size([1024, 64])
wav2vec2.encoder.layers.2.adapterblock.layer_norm1.weight True torch.Size([1024])
wav2vec2.encoder.layers.2.adapterblock.layer_norm1.bias True torch.Size([1024])
wav2vec2.encoder.layers.2.adapterblock.conv1.weight True torch.Size([512, 2, 3])
wav2vec2.encoder.layers.2.adapterblock.conv2.weight True torch.Size([512, 1, 5])
wav2vec2.encoder.layers.2.adapterblock.conv3.weight True torch.Size([1024, 1, 3])
wav2vec2.encoder.layers.2.adapterblock.se3.fc.0.weight True torch.Size([64, 1024])
wav2vec2.encoder.layers.2.adapterblock.se3.fc.2.weight True torch.Size([1024, 64])
wav2vec2.encoder.layers.3.adapterblock.layer_norm1.weight True torch.Size([1024])
wav2vec2.encoder.layers.3.adapterblock.layer_norm1.bias True torch.Size([1024])
wav2vec2.encoder.layers.3.adapterblock.conv1.weight True torch.Size([512, 2, 3])
wav2vec2.encoder.layers.3.adapterblock.conv2.weight True torch.Size([512, 1, 5])
wav2vec2.encoder.layers.3.adapterblock.conv3.weight True torch.Size([1024, 1, 3])
wav2vec2.encoder.layers.3.adapterblock.se3.fc.0.weight True torch.Size([64, 1024])
wav2vec2.encoder.layers.3.adapterblock.se3.fc.2.weight True torch.Size([1024, 64])
wav2vec2.encoder.layers.4.adapterblock.layer_norm1.weight True torch.Size([1024])
wav2vec2.encoder.layers.4.adapterblock.layer_norm1.bias True torch.Size([1024])
wav2vec2.encoder.layers.4.adapterblock.conv1.weight True torch.Size([512, 2, 3])
wav2vec2.encoder.layers.4.adapterblock.conv2.weight True torch.Size([512, 1, 5])
wav2vec2.encoder.layers.4.adapterblock.conv3.weight True torch.Size([1024, 1, 3])
wav2vec2.encoder.layers.4.adapterblock.se3.fc.0.weight True torch.Size([64, 1024])
wav2vec2.encoder.layers.4.adapterblock.se3.fc.2.weight True torch.Size([1024, 64])
wav2vec2.encoder.layers.5.adapterblock.layer_norm1.weight True torch.Size([1024])
wav2vec2.encoder.layers.5.adapterblock.layer_norm1.bias True torch.Size([1024])
wav2vec2.encoder.layers.5.adapterblock.conv1.weight True torch.Size([512, 2, 3])
wav2vec2.encoder.layers.5.adapterblock.conv2.weight True torch.Size([512, 1, 5])
wav2vec2.encoder.layers.5.adapterblock.conv3.weight True torch.Size([1024, 1, 3])
wav2vec2.encoder.layers.5.adapterblock.se3.fc.0.weight True torch.Size([64, 1024])
wav2vec2.encoder.layers.5.adapterblock.se3.fc.2.weight True torch.Size([1024, 64])
wav2vec2.encoder.layers.6.adapterblock.layer_norm1.weight True torch.Size([1024])
wav2vec2.encoder.layers.6.adapterblock.layer_norm1.bias True torch.Size([1024])
wav2vec2.encoder.layers.6.adapterblock.conv1.weight True torch.Size([512, 2, 3])
wav2vec2.encoder.layers.6.adapterblock.conv2.weight True torch.Size([512, 1, 5])
wav2vec2.encoder.layers.6.adapterblock.conv3.weight True torch.Size([1024, 1, 3])
wav2vec2.encoder.layers.6.adapterblock.se3.fc.0.weight True torch.Size([64, 1024])
wav2vec2.encoder.layers.6.adapterblock.se3.fc.2.weight True torch.Size([1024, 64])
wav2vec2.encoder.layers.7.adapterblock.layer_norm1.weight True torch.Size([1024])
wav2vec2.encoder.layers.7.adapterblock.layer_norm1.bias True torch.Size([1024])
wav2vec2.encoder.layers.7.adapterblock.conv1.weight True torch.Size([512, 2, 3])
wav2vec2.encoder.layers.7.adapterblock.conv2.weight True torch.Size([512, 1, 5])
wav2vec2.encoder.layers.7.adapterblock.conv3.weight True torch.Size([1024, 1, 3])
wav2vec2.encoder.layers.7.adapterblock.se3.fc.0.weight True torch.Size([64, 1024])
wav2vec2.encoder.layers.7.adapterblock.se3.fc.2.weight True torch.Size([1024, 64])
wav2vec2.encoder.layers.8.adapterblock.layer_norm1.weight True torch.Size([1024])
wav2vec2.encoder.layers.8.adapterblock.layer_norm1.bias True torch.Size([1024])
wav2vec2.encoder.layers.8.adapterblock.conv1.weight True torch.Size([512, 2, 3])
wav2vec2.encoder.layers.8.adapterblock.conv2.weight True torch.Size([512, 1, 5])
wav2vec2.encoder.layers.8.adapterblock.conv3.weight True torch.Size([1024, 1, 3])
wav2vec2.encoder.layers.8.adapterblock.se3.fc.0.weight True torch.Size([64, 1024])
wav2vec2.encoder.layers.8.adapterblock.se3.fc.2.weight True torch.Size([1024, 64])
wav2vec2.encoder.layers.9.adapterblock.layer_norm1.weight True torch.Size([1024])
wav2vec2.encoder.layers.9.adapterblock.layer_norm1.bias True torch.Size([1024])
wav2vec2.encoder.layers.9.adapterblock.conv1.weight True torch.Size([512, 2, 3])
wav2vec2.encoder.layers.9.adapterblock.conv2.weight True torch.Size([512, 1, 5])
wav2vec2.encoder.layers.9.adapterblock.conv3.weight True torch.Size([1024, 1, 3])
wav2vec2.encoder.layers.9.adapterblock.se3.fc.0.weight True torch.Size([64, 1024])
wav2vec2.encoder.layers.9.adapterblock.se3.fc.2.weight True torch.Size([1024, 64])
wav2vec2.encoder.layers.10.adapterblock.layer_norm1.weight True torch.Size([1024])
wav2vec2.encoder.layers.10.adapterblock.layer_norm1.bias True torch.Size([1024])
wav2vec2.encoder.layers.10.adapterblock.conv1.weight True torch.Size([512, 2, 3])
wav2vec2.encoder.layers.10.adapterblock.conv2.weight True torch.Size([512, 1, 5])
wav2vec2.encoder.layers.10.adapterblock.conv3.weight True torch.Size([1024, 1, 3])
wav2vec2.encoder.layers.10.adapterblock.se3.fc.0.weight True torch.Size([64, 1024])
wav2vec2.encoder.layers.10.adapterblock.se3.fc.2.weight True torch.Size([1024, 64])
wav2vec2.encoder.layers.11.adapterblock.layer_norm1.weight True torch.Size([1024])
wav2vec2.encoder.layers.11.adapterblock.layer_norm1.bias True torch.Size([1024])
wav2vec2.encoder.layers.11.adapterblock.conv1.weight True torch.Size([512, 2, 3])
wav2vec2.encoder.layers.11.adapterblock.conv2.weight True torch.Size([512, 1, 5])
wav2vec2.encoder.layers.11.adapterblock.conv3.weight True torch.Size([1024, 1, 3])
wav2vec2.encoder.layers.11.adapterblock.se3.fc.0.weight True torch.Size([64, 1024])
wav2vec2.encoder.layers.11.adapterblock.se3.fc.2.weight True torch.Size([1024, 64])
wav2vec2.encoder.layers.12.adapterblock.layer_norm1.weight True torch.Size([1024])
wav2vec2.encoder.layers.12.adapterblock.layer_norm1.bias True torch.Size([1024])
wav2vec2.encoder.layers.12.adapterblock.conv1.weight True torch.Size([512, 2, 3])
wav2vec2.encoder.layers.12.adapterblock.conv2.weight True torch.Size([512, 1, 5])
wav2vec2.encoder.layers.12.adapterblock.conv3.weight True torch.Size([1024, 1, 3])
wav2vec2.encoder.layers.12.adapterblock.se3.fc.0.weight True torch.Size([64, 1024])
wav2vec2.encoder.layers.12.adapterblock.se3.fc.2.weight True torch.Size([1024, 64])
wav2vec2.encoder.layers.13.adapterblock.layer_norm1.weight True torch.Size([1024])
wav2vec2.encoder.layers.13.adapterblock.layer_norm1.bias True torch.Size([1024])
wav2vec2.encoder.layers.13.adapterblock.conv1.weight True torch.Size([512, 2, 3])
wav2vec2.encoder.layers.13.adapterblock.conv2.weight True torch.Size([512, 1, 5])
wav2vec2.encoder.layers.13.adapterblock.conv3.weight True torch.Size([1024, 1, 3])
wav2vec2.encoder.layers.13.adapterblock.se3.fc.0.weight True torch.Size([64, 1024])
wav2vec2.encoder.layers.13.adapterblock.se3.fc.2.weight True torch.Size([1024, 64])
wav2vec2.encoder.layers.14.adapterblock.layer_norm1.weight True torch.Size([1024])
wav2vec2.encoder.layers.14.adapterblock.layer_norm1.bias True torch.Size([1024])
wav2vec2.encoder.layers.14.adapterblock.conv1.weight True torch.Size([512, 2, 3])
wav2vec2.encoder.layers.14.adapterblock.conv2.weight True torch.Size([512, 1, 5])
wav2vec2.encoder.layers.14.adapterblock.conv3.weight True torch.Size([1024, 1, 3])
wav2vec2.encoder.layers.14.adapterblock.se3.fc.0.weight True torch.Size([64, 1024])
wav2vec2.encoder.layers.14.adapterblock.se3.fc.2.weight True torch.Size([1024, 64])
wav2vec2.encoder.layers.15.adapterblock.layer_norm1.weight True torch.Size([1024])
wav2vec2.encoder.layers.15.adapterblock.layer_norm1.bias True torch.Size([1024])
wav2vec2.encoder.layers.15.adapterblock.conv1.weight True torch.Size([512, 2, 3])
wav2vec2.encoder.layers.15.adapterblock.conv2.weight True torch.Size([512, 1, 5])
wav2vec2.encoder.layers.15.adapterblock.conv3.weight True torch.Size([1024, 1, 3])
wav2vec2.encoder.layers.15.adapterblock.se3.fc.0.weight True torch.Size([64, 1024])
wav2vec2.encoder.layers.15.adapterblock.se3.fc.2.weight True torch.Size([1024, 64])
wav2vec2.encoder.layers.16.adapterblock.layer_norm1.weight True torch.Size([1024])
wav2vec2.encoder.layers.16.adapterblock.layer_norm1.bias True torch.Size([1024])
wav2vec2.encoder.layers.16.adapterblock.conv1.weight True torch.Size([512, 2, 3])
wav2vec2.encoder.layers.16.adapterblock.conv2.weight True torch.Size([512, 1, 5])
wav2vec2.encoder.layers.16.adapterblock.conv3.weight True torch.Size([1024, 1, 3])
wav2vec2.encoder.layers.16.adapterblock.se3.fc.0.weight True torch.Size([64, 1024])
wav2vec2.encoder.layers.16.adapterblock.se3.fc.2.weight True torch.Size([1024, 64])
wav2vec2.encoder.layers.17.adapterblock.layer_norm1.weight True torch.Size([1024])
wav2vec2.encoder.layers.17.adapterblock.layer_norm1.bias True torch.Size([1024])
wav2vec2.encoder.layers.17.adapterblock.conv1.weight True torch.Size([512, 2, 3])
wav2vec2.encoder.layers.17.adapterblock.conv2.weight True torch.Size([512, 1, 5])
wav2vec2.encoder.layers.17.adapterblock.conv3.weight True torch.Size([1024, 1, 3])
wav2vec2.encoder.layers.17.adapterblock.se3.fc.0.weight True torch.Size([64, 1024])
wav2vec2.encoder.layers.17.adapterblock.se3.fc.2.weight True torch.Size([1024, 64])
wav2vec2.encoder.layers.18.adapterblock.layer_norm1.weight True torch.Size([1024])
wav2vec2.encoder.layers.18.adapterblock.layer_norm1.bias True torch.Size([1024])
wav2vec2.encoder.layers.18.adapterblock.conv1.weight True torch.Size([512, 2, 3])
wav2vec2.encoder.layers.18.adapterblock.conv2.weight True torch.Size([512, 1, 5])
wav2vec2.encoder.layers.18.adapterblock.conv3.weight True torch.Size([1024, 1, 3])
wav2vec2.encoder.layers.18.adapterblock.se3.fc.0.weight True torch.Size([64, 1024])
wav2vec2.encoder.layers.18.adapterblock.se3.fc.2.weight True torch.Size([1024, 64])
wav2vec2.encoder.layers.19.adapterblock.layer_norm1.weight True torch.Size([1024])
wav2vec2.encoder.layers.19.adapterblock.layer_norm1.bias True torch.Size([1024])
wav2vec2.encoder.layers.19.adapterblock.conv1.weight True torch.Size([512, 2, 3])
wav2vec2.encoder.layers.19.adapterblock.conv2.weight True torch.Size([512, 1, 5])
wav2vec2.encoder.layers.19.adapterblock.conv3.weight True torch.Size([1024, 1, 3])
wav2vec2.encoder.layers.19.adapterblock.se3.fc.0.weight True torch.Size([64, 1024])
wav2vec2.encoder.layers.19.adapterblock.se3.fc.2.weight True torch.Size([1024, 64])
wav2vec2.encoder.layers.20.adapterblock.layer_norm1.weight True torch.Size([1024])
wav2vec2.encoder.layers.20.adapterblock.layer_norm1.bias True torch.Size([1024])
wav2vec2.encoder.layers.20.adapterblock.conv1.weight True torch.Size([512, 2, 3])
wav2vec2.encoder.layers.20.adapterblock.conv2.weight True torch.Size([512, 1, 5])
wav2vec2.encoder.layers.20.adapterblock.conv3.weight True torch.Size([1024, 1, 3])
wav2vec2.encoder.layers.20.adapterblock.se3.fc.0.weight True torch.Size([64, 1024])
wav2vec2.encoder.layers.20.adapterblock.se3.fc.2.weight True torch.Size([1024, 64])
wav2vec2.encoder.layers.21.adapterblock.layer_norm1.weight True torch.Size([1024])
wav2vec2.encoder.layers.21.adapterblock.layer_norm1.bias True torch.Size([1024])
wav2vec2.encoder.layers.21.adapterblock.conv1.weight True torch.Size([512, 2, 3])
wav2vec2.encoder.layers.21.adapterblock.conv2.weight True torch.Size([512, 1, 5])
wav2vec2.encoder.layers.21.adapterblock.conv3.weight True torch.Size([1024, 1, 3])
wav2vec2.encoder.layers.21.adapterblock.se3.fc.0.weight True torch.Size([64, 1024])
wav2vec2.encoder.layers.21.adapterblock.se3.fc.2.weight True torch.Size([1024, 64])
wav2vec2.encoder.layers.22.adapterblock.layer_norm1.weight True torch.Size([1024])
wav2vec2.encoder.layers.22.adapterblock.layer_norm1.bias True torch.Size([1024])
wav2vec2.encoder.layers.22.adapterblock.conv1.weight True torch.Size([512, 2, 3])
wav2vec2.encoder.layers.22.adapterblock.conv2.weight True torch.Size([512, 1, 5])
wav2vec2.encoder.layers.22.adapterblock.conv3.weight True torch.Size([1024, 1, 3])
wav2vec2.encoder.layers.22.adapterblock.se3.fc.0.weight True torch.Size([64, 1024])
wav2vec2.encoder.layers.22.adapterblock.se3.fc.2.weight True torch.Size([1024, 64])
wav2vec2.encoder.layers.23.adapterblock.layer_norm1.weight True torch.Size([1024])
wav2vec2.encoder.layers.23.adapterblock.layer_norm1.bias True torch.Size([1024])
wav2vec2.encoder.layers.23.adapterblock.conv1.weight True torch.Size([512, 2, 3])
wav2vec2.encoder.layers.23.adapterblock.conv2.weight True torch.Size([512, 1, 5])
wav2vec2.encoder.layers.23.adapterblock.conv3.weight True torch.Size([1024, 1, 3])
wav2vec2.encoder.layers.23.adapterblock.se3.fc.0.weight True torch.Size([64, 1024])
wav2vec2.encoder.layers.23.adapterblock.se3.fc.2.weight True torch.Size([1024, 64])
projector.weight True torch.Size([256, 1024])
projector.bias True torch.Size([256])
classifier.weight True torch.Size([11, 256])
classifier.bias True torch.Size([11])
{'loss': 2.3963, 'learning_rate': 6.060606060606061e-06, 'epoch': 0.3}
{'eval_loss': 2.392518997192383, 'eval_accuracy': 0.1069676153091266, 'eval_runtime': 27.7973, 'eval_samples_per_second': 146.633, 'eval_steps_per_second': 1.151, 'epoch': 0.38}
{'loss': 2.3898, 'learning_rate': 1.2121212121212122e-05, 'epoch': 0.61}
{'eval_loss': 2.375178098678589, 'eval_accuracy': 0.10034347399411188, 'eval_runtime': 27.3426, 'eval_samples_per_second': 149.071, 'eval_steps_per_second': 1.17, 'epoch': 0.76}
{'loss': 2.378, 'learning_rate': 1.8181818181818182e-05, 'epoch': 0.91}
{'eval_loss': 2.347245931625366, 'eval_accuracy': 0.10083415112855741, 'eval_runtime': 27.3743, 'eval_samples_per_second': 148.899, 'eval_steps_per_second': 1.169, 'epoch': 1.14}
{'loss': 2.359, 'learning_rate': 2.4242424242424244e-05, 'epoch': 1.21}
{'loss': 2.3318, 'learning_rate': 3.0303030303030306e-05, 'epoch': 1.52}
{'eval_loss': 2.3064920902252197, 'eval_accuracy': 0.10672227674190382, 'eval_runtime': 27.1957, 'eval_samples_per_second': 149.876, 'eval_steps_per_second': 1.177, 'epoch': 1.52}
{'loss': 2.294, 'learning_rate': 3.6363636363636364e-05, 'epoch': 1.82}
{'eval_loss': 2.2381434440612793, 'eval_accuracy': 0.15554465161923453, 'eval_runtime': 28.0957, 'eval_samples_per_second': 145.076, 'eval_steps_per_second': 1.139, 'epoch': 1.89}
{'loss': 2.2286, 'learning_rate': 4.242424242424243e-05, 'epoch': 2.12}
{'eval_loss': 2.0923173427581787, 'eval_accuracy': 0.2838567222767419, 'eval_runtime': 27.2256, 'eval_samples_per_second': 149.712, 'eval_steps_per_second': 1.175, 'epoch': 2.27}
{'loss': 2.1292, 'learning_rate': 4.848484848484849e-05, 'epoch': 2.42}
{'eval_loss': 1.7782011032104492, 'eval_accuracy': 0.5328753680078508, 'eval_runtime': 27.0952, 'eval_samples_per_second': 150.433, 'eval_steps_per_second': 1.181, 'epoch': 2.65}
{'loss': 1.9344, 'learning_rate': 5.4545454545454546e-05, 'epoch': 2.73}
{'loss': 1.6293, 'learning_rate': 6.060606060606061e-05, 'epoch': 3.03}
{'eval_loss': 1.2646293640136719, 'eval_accuracy': 0.7448478900883219, 'eval_runtime': 28.3359, 'eval_samples_per_second': 143.846, 'eval_steps_per_second': 1.129, 'epoch': 3.03}
{'loss': 1.2622, 'learning_rate': 6.666666666666667e-05, 'epoch': 3.33}
{'eval_loss': 0.7661157846450806, 'eval_accuracy': 0.9153581943081452, 'eval_runtime': 27.3438, 'eval_samples_per_second': 149.065, 'eval_steps_per_second': 1.17, 'epoch': 3.41}
{'loss': 0.9701, 'learning_rate': 7.272727272727273e-05, 'epoch': 3.64}
{'eval_loss': 0.4462674856185913, 'eval_accuracy': 0.9617271835132483, 'eval_runtime': 27.5676, 'eval_samples_per_second': 147.855, 'eval_steps_per_second': 1.161, 'epoch': 3.79}
{'loss': 0.76, 'learning_rate': 7.878787878787879e-05, 'epoch': 3.94}
{'eval_loss': 0.27150797843933105, 'eval_accuracy': 0.9673699705593719, 'eval_runtime': 27.2277, 'eval_samples_per_second': 149.7, 'eval_steps_per_second': 1.175, 'epoch': 4.17}
{'loss': 0.6141, 'learning_rate': 8.484848484848486e-05, 'epoch': 4.24}
{'loss': 0.5009, 'learning_rate': 9.090909090909092e-05, 'epoch': 4.55}
{'eval_loss': 0.19056454300880432, 'eval_accuracy': 0.9708047105004907, 'eval_runtime': 27.184, 'eval_samples_per_second': 149.941, 'eval_steps_per_second': 1.177, 'epoch': 4.55}
{'loss': 0.4719, 'learning_rate': 9.696969696969698e-05, 'epoch': 4.85}
{'eval_loss': 0.14704813063144684, 'eval_accuracy': 0.9735034347399412, 'eval_runtime': 27.3855, 'eval_samples_per_second': 148.838, 'eval_steps_per_second': 1.169, 'epoch': 4.92}
{'loss': 0.4245, 'learning_rate': 0.00010303030303030303, 'epoch': 5.15}
{'eval_loss': 0.11537867784500122, 'eval_accuracy': 0.975711481844946, 'eval_runtime': 27.463, 'eval_samples_per_second': 148.418, 'eval_steps_per_second': 1.165, 'epoch': 5.3}
{'loss': 0.4133, 'learning_rate': 0.00010909090909090909, 'epoch': 5.45}
{'eval_loss': 0.10083912312984467, 'eval_accuracy': 0.9781648675171737, 'eval_runtime': 27.2237, 'eval_samples_per_second': 149.723, 'eval_steps_per_second': 1.175, 'epoch': 5.68}
{'loss': 0.3955, 'learning_rate': 0.00011515151515151516, 'epoch': 5.76}
{'loss': 0.3674, 'learning_rate': 0.00012121212121212122, 'epoch': 6.06}
{'eval_loss': 0.09227311611175537, 'eval_accuracy': 0.9771835132482827, 'eval_runtime': 27.1825, 'eval_samples_per_second': 149.949, 'eval_steps_per_second': 1.177, 'epoch': 6.06}
{'loss': 0.3561, 'learning_rate': 0.00012727272727272728, 'epoch': 6.36}
{'eval_loss': 0.08484320342540741, 'eval_accuracy': 0.9779195289499509, 'eval_runtime': 27.3564, 'eval_samples_per_second': 148.996, 'eval_steps_per_second': 1.17, 'epoch': 6.44}
{'loss': 0.3442, 'learning_rate': 0.00013333333333333334, 'epoch': 6.67}
{'eval_loss': 0.08122183382511139, 'eval_accuracy': 0.9796368989205103, 'eval_runtime': 26.8992, 'eval_samples_per_second': 151.529, 'eval_steps_per_second': 1.19, 'epoch': 6.82}
{'loss': 0.3692, 'learning_rate': 0.0001393939393939394, 'epoch': 6.97}
{'eval_loss': 0.07756837457418442, 'eval_accuracy': 0.9811089303238469, 'eval_runtime': 27.5387, 'eval_samples_per_second': 148.01, 'eval_steps_per_second': 1.162, 'epoch': 7.2}
{'loss': 0.3247, 'learning_rate': 0.00014545454545454546, 'epoch': 7.27}
{'loss': 0.31, 'learning_rate': 0.00015151515151515152, 'epoch': 7.58}
{'eval_loss': 0.07559472322463989, 'eval_accuracy': 0.9796368989205103, 'eval_runtime': 27.1204, 'eval_samples_per_second': 150.293, 'eval_steps_per_second': 1.18, 'epoch': 7.58}
{'loss': 0.3369, 'learning_rate': 0.00015757575757575757, 'epoch': 7.88}
{'eval_loss': 0.07489926367998123, 'eval_accuracy': 0.9811089303238469, 'eval_runtime': 27.3009, 'eval_samples_per_second': 149.299, 'eval_steps_per_second': 1.172, 'epoch': 7.95}
{'loss': 0.3162, 'learning_rate': 0.00016363636363636366, 'epoch': 8.18}
{'eval_loss': 0.07260408997535706, 'eval_accuracy': 0.9801275760549558, 'eval_runtime': 26.948, 'eval_samples_per_second': 151.254, 'eval_steps_per_second': 1.187, 'epoch': 8.33}
{'loss': 0.3131, 'learning_rate': 0.00016969696969696972, 'epoch': 8.48}
{'eval_loss': 0.06968352198600769, 'eval_accuracy': 0.9808635917566242, 'eval_runtime': 27.4623, 'eval_samples_per_second': 148.422, 'eval_steps_per_second': 1.165, 'epoch': 8.71}
{'loss': 0.3009, 'learning_rate': 0.00017575757575757578, 'epoch': 8.79}
{'loss': 0.2764, 'learning_rate': 0.00018181818181818183, 'epoch': 9.09}
{'eval_loss': 0.06784188002347946, 'eval_accuracy': 0.9803729146221786, 'eval_runtime': 26.9706, 'eval_samples_per_second': 151.128, 'eval_steps_per_second': 1.186, 'epoch': 9.09}
{'loss': 0.2682, 'learning_rate': 0.0001878787878787879, 'epoch': 9.39}
{'eval_loss': 0.06491357088088989, 'eval_accuracy': 0.9806182531894013, 'eval_runtime': 27.926, 'eval_samples_per_second': 145.957, 'eval_steps_per_second': 1.146, 'epoch': 9.47}
{'loss': 0.2759, 'learning_rate': 0.00019393939393939395, 'epoch': 9.7}
{'eval_loss': 0.06823450326919556, 'eval_accuracy': 0.9791462217860648, 'eval_runtime': 26.9115, 'eval_samples_per_second': 151.46, 'eval_steps_per_second': 1.189, 'epoch': 9.85}
{'loss': 0.2957, 'learning_rate': 0.0002, 'epoch': 10.0}
{'eval_loss': 0.06409069895744324, 'eval_accuracy': 0.9813542688910697, 'eval_runtime': 27.0117, 'eval_samples_per_second': 150.898, 'eval_steps_per_second': 1.185, 'epoch': 10.23}
{'loss': 0.288, 'learning_rate': 0.00019932659932659933, 'epoch': 10.3}
{'loss': 0.286, 'learning_rate': 0.00019865319865319868, 'epoch': 10.61}
{'eval_loss': 0.06384247541427612, 'eval_accuracy': 0.9813542688910697, 'eval_runtime': 28.1072, 'eval_samples_per_second': 145.016, 'eval_steps_per_second': 1.138, 'epoch': 10.61}
{'loss': 0.287, 'learning_rate': 0.000197979797979798, 'epoch': 10.91}
{'eval_loss': 0.06358187645673752, 'eval_accuracy': 0.9808635917566242, 'eval_runtime': 26.9147, 'eval_samples_per_second': 151.441, 'eval_steps_per_second': 1.189, 'epoch': 10.98}
{'loss': 0.27, 'learning_rate': 0.0001973063973063973, 'epoch': 11.21}
{'eval_loss': 0.06145017594099045, 'eval_accuracy': 0.9811089303238469, 'eval_runtime': 27.2, 'eval_samples_per_second': 149.853, 'eval_steps_per_second': 1.176, 'epoch': 11.36}
{'loss': 0.2662, 'learning_rate': 0.00019663299663299664, 'epoch': 11.52}
{'eval_loss': 0.06418114900588989, 'eval_accuracy': 0.9815996074582924, 'eval_runtime': 27.0699, 'eval_samples_per_second': 150.573, 'eval_steps_per_second': 1.182, 'epoch': 11.74}
{'loss': 0.2748, 'learning_rate': 0.00019595959595959596, 'epoch': 11.82}
{'loss': 0.2501, 'learning_rate': 0.00019528619528619528, 'epoch': 12.12}
{'eval_loss': 0.062381718307733536, 'eval_accuracy': 0.9815996074582924, 'eval_runtime': 27.356, 'eval_samples_per_second': 148.999, 'eval_steps_per_second': 1.17, 'epoch': 12.12}
{'loss': 0.2709, 'learning_rate': 0.00019461279461279463, 'epoch': 12.42}
{'eval_loss': 0.06008736044168472, 'eval_accuracy': 0.9813542688910697, 'eval_runtime': 27.049, 'eval_samples_per_second': 150.69, 'eval_steps_per_second': 1.183, 'epoch': 12.5}
{'loss': 0.2674, 'learning_rate': 0.00019393939393939395, 'epoch': 12.73}
{'eval_loss': 0.061650350689888, 'eval_accuracy': 0.982090284592738, 'eval_runtime': 27.1639, 'eval_samples_per_second': 150.052, 'eval_steps_per_second': 1.178, 'epoch': 12.88}
{'loss': 0.2748, 'learning_rate': 0.00019326599326599327, 'epoch': 13.03}
{'eval_loss': 0.06241193786263466, 'eval_accuracy': 0.9815996074582924, 'eval_runtime': 26.8997, 'eval_samples_per_second': 151.526, 'eval_steps_per_second': 1.19, 'epoch': 13.26}
{'loss': 0.2571, 'learning_rate': 0.0001925925925925926, 'epoch': 13.33}
{'loss': 0.2601, 'learning_rate': 0.00019191919191919191, 'epoch': 13.64}
{'eval_loss': 0.06236305460333824, 'eval_accuracy': 0.9813542688910697, 'eval_runtime': 27.2186, 'eval_samples_per_second': 149.751, 'eval_steps_per_second': 1.176, 'epoch': 13.64}
{'loss': 0.2569, 'learning_rate': 0.00019124579124579126, 'epoch': 13.94}
{'eval_loss': 0.058689236640930176, 'eval_accuracy': 0.9815996074582924, 'eval_runtime': 26.8979, 'eval_samples_per_second': 151.536, 'eval_steps_per_second': 1.19, 'epoch': 14.02}
{'loss': 0.2566, 'learning_rate': 0.00019057239057239058, 'epoch': 14.24}
{'eval_loss': 0.061552852392196655, 'eval_accuracy': 0.9813542688910697, 'eval_runtime': 27.2869, 'eval_samples_per_second': 149.375, 'eval_steps_per_second': 1.173, 'epoch': 14.39}
{'loss': 0.2502, 'learning_rate': 0.0001898989898989899, 'epoch': 14.55}
{'eval_loss': 0.06044105812907219, 'eval_accuracy': 0.9815996074582924, 'eval_runtime': 26.8151, 'eval_samples_per_second': 152.004, 'eval_steps_per_second': 1.193, 'epoch': 14.77}
{'loss': 0.2575, 'learning_rate': 0.00018922558922558925, 'epoch': 14.85}
{'loss': 0.2587, 'learning_rate': 0.00018855218855218857, 'epoch': 15.15}
{'eval_loss': 0.05935252085328102, 'eval_accuracy': 0.9815996074582924, 'eval_runtime': 27.2589, 'eval_samples_per_second': 149.529, 'eval_steps_per_second': 1.174, 'epoch': 15.15}
{'loss': 0.2558, 'learning_rate': 0.0001878787878787879, 'epoch': 15.45}
{'eval_loss': 0.05982695892453194, 'eval_accuracy': 0.9811089303238469, 'eval_runtime': 26.7639, 'eval_samples_per_second': 152.294, 'eval_steps_per_second': 1.196, 'epoch': 15.53}
{'loss': 0.2497, 'learning_rate': 0.0001872053872053872, 'epoch': 15.76}
{'eval_loss': 0.058198846876621246, 'eval_accuracy': 0.9815996074582924, 'eval_runtime': 27.1968, 'eval_samples_per_second': 149.871, 'eval_steps_per_second': 1.177, 'epoch': 15.91}
{'loss': 0.2294, 'learning_rate': 0.00018653198653198653, 'epoch': 16.06}
{'eval_loss': 0.05982423946261406, 'eval_accuracy': 0.9823356231599607, 'eval_runtime': 27.1854, 'eval_samples_per_second': 149.934, 'eval_steps_per_second': 1.177, 'epoch': 16.29}
{'loss': 0.248, 'learning_rate': 0.00018585858585858586, 'epoch': 16.36}
{'loss': 0.249, 'learning_rate': 0.0001851851851851852, 'epoch': 16.67}
{'eval_loss': 0.058448292315006256, 'eval_accuracy': 0.9818449460255152, 'eval_runtime': 27.2185, 'eval_samples_per_second': 149.751, 'eval_steps_per_second': 1.176, 'epoch': 16.67}
{'loss': 0.2514, 'learning_rate': 0.00018451178451178452, 'epoch': 16.97}
{'eval_loss': 0.060459066182374954, 'eval_accuracy': 0.9818449460255152, 'eval_runtime': 26.9077, 'eval_samples_per_second': 151.481, 'eval_steps_per_second': 1.189, 'epoch': 17.05}
{'loss': 0.2449, 'learning_rate': 0.00018383838383838384, 'epoch': 17.27}
{'eval_loss': 0.06008273363113403, 'eval_accuracy': 0.982090284592738, 'eval_runtime': 27.2264, 'eval_samples_per_second': 149.708, 'eval_steps_per_second': 1.175, 'epoch': 17.42}
{'loss': 0.2449, 'learning_rate': 0.0001831649831649832, 'epoch': 17.58}
{'eval_loss': 0.058761633932590485, 'eval_accuracy': 0.9823356231599607, 'eval_runtime': 26.9808, 'eval_samples_per_second': 151.07, 'eval_steps_per_second': 1.186, 'epoch': 17.8}
{'loss': 0.2327, 'learning_rate': 0.00018249158249158249, 'epoch': 17.88}
{'loss': 0.2443, 'learning_rate': 0.00018181818181818183, 'epoch': 18.18}
{'eval_loss': 0.056250251829624176, 'eval_accuracy': 0.982090284592738, 'eval_runtime': 26.8815, 'eval_samples_per_second': 151.629, 'eval_steps_per_second': 1.19, 'epoch': 18.18}
{'loss': 0.2326, 'learning_rate': 0.00018114478114478116, 'epoch': 18.48}
{'eval_loss': 0.058566413819789886, 'eval_accuracy': 0.9813542688910697, 'eval_runtime': 27.3479, 'eval_samples_per_second': 149.043, 'eval_steps_per_second': 1.17, 'epoch': 18.56}
{'loss': 0.2408, 'learning_rate': 0.00018047138047138048, 'epoch': 18.79}
{'eval_loss': 0.056851282715797424, 'eval_accuracy': 0.9825809617271836, 'eval_runtime': 26.8742, 'eval_samples_per_second': 151.67, 'eval_steps_per_second': 1.191, 'epoch': 18.94}
{'loss': 0.2235, 'learning_rate': 0.0001797979797979798, 'epoch': 19.09}
{'eval_loss': 0.057550400495529175, 'eval_accuracy': 0.9828263002944063, 'eval_runtime': 27.1406, 'eval_samples_per_second': 150.181, 'eval_steps_per_second': 1.179, 'epoch': 19.32}
{'loss': 0.2495, 'learning_rate': 0.00017912457912457914, 'epoch': 19.39}
{'loss': 0.2298, 'learning_rate': 0.00017845117845117847, 'epoch': 19.7}
{'eval_loss': 0.058133479207754135, 'eval_accuracy': 0.982090284592738, 'eval_runtime': 27.0175, 'eval_samples_per_second': 150.865, 'eval_steps_per_second': 1.184, 'epoch': 19.7}
{'loss': 0.2451, 'learning_rate': 0.00017777777777777779, 'epoch': 20.0}
{'eval_loss': 0.055786266922950745, 'eval_accuracy': 0.9825809617271836, 'eval_runtime': 27.2949, 'eval_samples_per_second': 149.332, 'eval_steps_per_second': 1.172, 'epoch': 20.08}
{'loss': 0.2364, 'learning_rate': 0.0001771043771043771, 'epoch': 20.3}
{'eval_loss': 0.05519174411892891, 'eval_accuracy': 0.9823356231599607, 'eval_runtime': 26.9147, 'eval_samples_per_second': 151.442, 'eval_steps_per_second': 1.189, 'epoch': 20.45}
{'loss': 0.245, 'learning_rate': 0.00017643097643097643, 'epoch': 20.61}
{'eval_loss': 0.05766718462109566, 'eval_accuracy': 0.982090284592738, 'eval_runtime': 27.169, 'eval_samples_per_second': 150.024, 'eval_steps_per_second': 1.178, 'epoch': 20.83}
{'loss': 0.2275, 'learning_rate': 0.00017575757575757578, 'epoch': 20.91}
{'loss': 0.2184, 'learning_rate': 0.0001750841750841751, 'epoch': 21.21}
{'eval_loss': 0.056745029985904694, 'eval_accuracy': 0.9823356231599607, 'eval_runtime': 26.8589, 'eval_samples_per_second': 151.756, 'eval_steps_per_second': 1.191, 'epoch': 21.21}
{'loss': 0.2487, 'learning_rate': 0.00017441077441077442, 'epoch': 21.52}
{'eval_loss': 0.0537150613963604, 'eval_accuracy': 0.9825809617271836, 'eval_runtime': 27.1458, 'eval_samples_per_second': 150.152, 'eval_steps_per_second': 1.179, 'epoch': 21.59}
{'loss': 0.2358, 'learning_rate': 0.00017373737373737377, 'epoch': 21.82}
{'eval_loss': 0.05506867915391922, 'eval_accuracy': 0.9823356231599607, 'eval_runtime': 27.0266, 'eval_samples_per_second': 150.814, 'eval_steps_per_second': 1.184, 'epoch': 21.97}
{'loss': 0.2335, 'learning_rate': 0.00017306397306397306, 'epoch': 22.12}
{'eval_loss': 0.05524234101176262, 'eval_accuracy': 0.9833169774288518, 'eval_runtime': 27.2329, 'eval_samples_per_second': 149.672, 'eval_steps_per_second': 1.175, 'epoch': 22.35}
{'loss': 0.2293, 'learning_rate': 0.00017239057239057238, 'epoch': 22.42}
{'loss': 0.2213, 'learning_rate': 0.00017171717171717173, 'epoch': 22.73}
{'eval_loss': 0.05643047019839287, 'eval_accuracy': 0.9828263002944063, 'eval_runtime': 26.9613, 'eval_samples_per_second': 151.179, 'eval_steps_per_second': 1.187, 'epoch': 22.73}
{'loss': 0.2402, 'learning_rate': 0.00017104377104377105, 'epoch': 23.03}
{'eval_loss': 0.0547170490026474, 'eval_accuracy': 0.9828263002944063, 'eval_runtime': 27.7236, 'eval_samples_per_second': 147.023, 'eval_steps_per_second': 1.154, 'epoch': 23.11}
{'loss': 0.2301, 'learning_rate': 0.00017037037037037037, 'epoch': 23.33}
{'eval_loss': 0.055996231734752655, 'eval_accuracy': 0.9825809617271836, 'eval_runtime': 26.8327, 'eval_samples_per_second': 151.904, 'eval_steps_per_second': 1.193, 'epoch': 23.48}
{'loss': 0.221, 'learning_rate': 0.00016969696969696972, 'epoch': 23.64}
{'eval_loss': 0.057986728847026825, 'eval_accuracy': 0.9828263002944063, 'eval_runtime': 27.0061, 'eval_samples_per_second': 150.929, 'eval_steps_per_second': 1.185, 'epoch': 23.86}
{'loss': 0.2287, 'learning_rate': 0.00016902356902356904, 'epoch': 23.94}
{'loss': 0.2283, 'learning_rate': 0.00016835016835016836, 'epoch': 24.24}
{'eval_loss': 0.053891293704509735, 'eval_accuracy': 0.9830716388616291, 'eval_runtime': 27.0259, 'eval_samples_per_second': 150.818, 'eval_steps_per_second': 1.184, 'epoch': 24.24}
{'loss': 0.2277, 'learning_rate': 0.00016767676767676768, 'epoch': 24.55}
{'eval_loss': 0.05459111928939819, 'eval_accuracy': 0.9835623159960746, 'eval_runtime': 27.4957, 'eval_samples_per_second': 148.242, 'eval_steps_per_second': 1.164, 'epoch': 24.62}
{'loss': 0.2094, 'learning_rate': 0.000167003367003367, 'epoch': 24.85}
{'eval_loss': 0.05399749428033829, 'eval_accuracy': 0.9830716388616291, 'eval_runtime': 27.039, 'eval_samples_per_second': 150.745, 'eval_steps_per_second': 1.183, 'epoch': 25.0}
{'loss': 0.2273, 'learning_rate': 0.00016632996632996635, 'epoch': 25.15}
{'eval_loss': 0.05438000708818436, 'eval_accuracy': 0.9835623159960746, 'eval_runtime': 27.1206, 'eval_samples_per_second': 150.292, 'eval_steps_per_second': 1.18, 'epoch': 25.38}
{'loss': 0.2181, 'learning_rate': 0.00016565656565656567, 'epoch': 25.45}
{'loss': 0.2311, 'learning_rate': 0.000164983164983165, 'epoch': 25.76}
{'eval_loss': 0.05546478182077408, 'eval_accuracy': 0.9825809617271836, 'eval_runtime': 27.2577, 'eval_samples_per_second': 149.536, 'eval_steps_per_second': 1.174, 'epoch': 25.76}
{'loss': 0.2282, 'learning_rate': 0.00016430976430976434, 'epoch': 26.06}
{'eval_loss': 0.054937973618507385, 'eval_accuracy': 0.9838076545632973, 'eval_runtime': 27.4645, 'eval_samples_per_second': 148.41, 'eval_steps_per_second': 1.165, 'epoch': 26.14}
{'loss': 0.221, 'learning_rate': 0.00016363636363636366, 'epoch': 26.36}
{'eval_loss': 0.054976727813482285, 'eval_accuracy': 0.9830716388616291, 'eval_runtime': 27.1337, 'eval_samples_per_second': 150.219, 'eval_steps_per_second': 1.179, 'epoch': 26.52}
{'loss': 0.2155, 'learning_rate': 0.00016296296296296295, 'epoch': 26.67}
{'eval_loss': 0.05324995145201683, 'eval_accuracy': 0.9842983316977428, 'eval_runtime': 27.3863, 'eval_samples_per_second': 148.833, 'eval_steps_per_second': 1.168, 'epoch': 26.89}
{'loss': 0.2203, 'learning_rate': 0.0001622895622895623, 'epoch': 26.97}
{'loss': 0.2202, 'learning_rate': 0.00016161616161616162, 'epoch': 27.27}
{'eval_loss': 0.05372694134712219, 'eval_accuracy': 0.9828263002944063, 'eval_runtime': 26.9612, 'eval_samples_per_second': 151.18, 'eval_steps_per_second': 1.187, 'epoch': 27.27}
{'loss': 0.2275, 'learning_rate': 0.00016094276094276094, 'epoch': 27.58}
{'eval_loss': 0.05414142459630966, 'eval_accuracy': 0.9842983316977428, 'eval_runtime': 27.4596, 'eval_samples_per_second': 148.436, 'eval_steps_per_second': 1.165, 'epoch': 27.65}
{'loss': 0.2218, 'learning_rate': 0.0001602693602693603, 'epoch': 27.88}
{'eval_loss': 0.05440646782517433, 'eval_accuracy': 0.9830716388616291, 'eval_runtime': 27.1192, 'eval_samples_per_second': 150.299, 'eval_steps_per_second': 1.18, 'epoch': 28.03}
{'loss': 0.2094, 'learning_rate': 0.0001595959595959596, 'epoch': 28.18}
{'eval_loss': 0.05491634085774422, 'eval_accuracy': 0.9830716388616291, 'eval_runtime': 27.3619, 'eval_samples_per_second': 148.966, 'eval_steps_per_second': 1.17, 'epoch': 28.41}
{'loss': 0.2188, 'learning_rate': 0.00015892255892255893, 'epoch': 28.48}
{'loss': 0.2283, 'learning_rate': 0.00015824915824915825, 'epoch': 28.79}
{'eval_loss': 0.05504396930336952, 'eval_accuracy': 0.9835623159960746, 'eval_runtime': 26.9701, 'eval_samples_per_second': 151.131, 'eval_steps_per_second': 1.187, 'epoch': 28.79}
{'loss': 0.2195, 'learning_rate': 0.00015757575757575757, 'epoch': 29.09}
{'eval_loss': 0.05350787937641144, 'eval_accuracy': 0.9835623159960746, 'eval_runtime': 27.4526, 'eval_samples_per_second': 148.474, 'eval_steps_per_second': 1.166, 'epoch': 29.17}
{'loss': 0.2193, 'learning_rate': 0.0001569023569023569, 'epoch': 29.39}
{'eval_loss': 0.05305716022849083, 'eval_accuracy': 0.9833169774288518, 'eval_runtime': 27.132, 'eval_samples_per_second': 150.228, 'eval_steps_per_second': 1.179, 'epoch': 29.55}
{'loss': 0.2106, 'learning_rate': 0.00015622895622895624, 'epoch': 29.7}
{'eval_loss': 0.053613193333148956, 'eval_accuracy': 0.9828263002944063, 'eval_runtime': 27.1985, 'eval_samples_per_second': 149.861, 'eval_steps_per_second': 1.177, 'epoch': 29.92}
{'loss': 0.2199, 'learning_rate': 0.00015555555555555556, 'epoch': 30.0}
{'loss': 0.2233, 'learning_rate': 0.00015488215488215488, 'epoch': 30.3}
{'eval_loss': 0.053364191204309464, 'eval_accuracy': 0.9828263002944063, 'eval_runtime': 28.0139, 'eval_samples_per_second': 145.499, 'eval_steps_per_second': 1.142, 'epoch': 30.3}
{'loss': 0.2164, 'learning_rate': 0.00015420875420875423, 'epoch': 30.61}
{'eval_loss': 0.054305143654346466, 'eval_accuracy': 0.9828263002944063, 'eval_runtime': 27.4881, 'eval_samples_per_second': 148.282, 'eval_steps_per_second': 1.164, 'epoch': 30.68}
{'loss': 0.2237, 'learning_rate': 0.00015353535353535353, 'epoch': 30.91}
{'eval_loss': 0.053239256143569946, 'eval_accuracy': 0.9835623159960746, 'eval_runtime': 27.0393, 'eval_samples_per_second': 150.744, 'eval_steps_per_second': 1.183, 'epoch': 31.06}
{'loss': 0.2169, 'learning_rate': 0.00015286195286195287, 'epoch': 31.21}
{'eval_loss': 0.054070498794317245, 'eval_accuracy': 0.9825809617271836, 'eval_runtime': 27.5046, 'eval_samples_per_second': 148.193, 'eval_steps_per_second': 1.163, 'epoch': 31.44}
{'loss': 0.2181, 'learning_rate': 0.0001521885521885522, 'epoch': 31.52}
{'loss': 0.2174, 'learning_rate': 0.00015151515151515152, 'epoch': 31.82}
{'eval_loss': 0.053596001118421555, 'eval_accuracy': 0.9833169774288518, 'eval_runtime': 26.9737, 'eval_samples_per_second': 151.11, 'eval_steps_per_second': 1.186, 'epoch': 31.82}
{'loss': 0.2117, 'learning_rate': 0.00015084175084175086, 'epoch': 32.12}
{'eval_loss': 0.052170924842357635, 'eval_accuracy': 0.9845436702649657, 'eval_runtime': 27.2173, 'eval_samples_per_second': 149.758, 'eval_steps_per_second': 1.176, 'epoch': 32.2}
{'loss': 0.2159, 'learning_rate': 0.00015016835016835018, 'epoch': 32.42}
{'eval_loss': 0.05200152099132538, 'eval_accuracy': 0.9838076545632973, 'eval_runtime': 26.9413, 'eval_samples_per_second': 151.292, 'eval_steps_per_second': 1.188, 'epoch': 32.58}
{'loss': 0.221, 'learning_rate': 0.0001494949494949495, 'epoch': 32.73}
{'eval_loss': 0.05309345945715904, 'eval_accuracy': 0.9835623159960746, 'eval_runtime': 27.2734, 'eval_samples_per_second': 149.45, 'eval_steps_per_second': 1.173, 'epoch': 32.95}
{'loss': 0.2145, 'learning_rate': 0.00014882154882154885, 'epoch': 33.03}
{'loss': 0.2091, 'learning_rate': 0.00014814814814814815, 'epoch': 33.33}
{'eval_loss': 0.05236596241593361, 'eval_accuracy': 0.9847890088321885, 'eval_runtime': 27.0659, 'eval_samples_per_second': 150.595, 'eval_steps_per_second': 1.182, 'epoch': 33.33}
{'loss': 0.2068, 'learning_rate': 0.00014747474747474747, 'epoch': 33.64}
{'eval_loss': 0.051104575395584106, 'eval_accuracy': 0.9838076545632973, 'eval_runtime': 27.3764, 'eval_samples_per_second': 148.887, 'eval_steps_per_second': 1.169, 'epoch': 33.71}
{'loss': 0.2283, 'learning_rate': 0.00014680134680134681, 'epoch': 33.94}
{'eval_loss': 0.051235493272542953, 'eval_accuracy': 0.9835623159960746, 'eval_runtime': 26.8193, 'eval_samples_per_second': 151.98, 'eval_steps_per_second': 1.193, 'epoch': 34.09}
{'loss': 0.2261, 'learning_rate': 0.00014612794612794614, 'epoch': 34.24}
{'eval_loss': 0.051389291882514954, 'eval_accuracy': 0.9845436702649657, 'eval_runtime': 27.1958, 'eval_samples_per_second': 149.876, 'eval_steps_per_second': 1.177, 'epoch': 34.47}
{'loss': 0.2073, 'learning_rate': 0.00014545454545454546, 'epoch': 34.55}
{'loss': 0.2118, 'learning_rate': 0.0001447811447811448, 'epoch': 34.85}
{'eval_loss': 0.05308201536536217, 'eval_accuracy': 0.9845436702649657, 'eval_runtime': 26.9831, 'eval_samples_per_second': 151.058, 'eval_steps_per_second': 1.186, 'epoch': 34.85}
{'loss': 0.217, 'learning_rate': 0.00014410774410774413, 'epoch': 35.15}
{'eval_loss': 0.05266507342457771, 'eval_accuracy': 0.9835623159960746, 'eval_runtime': 27.3678, 'eval_samples_per_second': 148.934, 'eval_steps_per_second': 1.169, 'epoch': 35.23}
{'loss': 0.2117, 'learning_rate': 0.00014343434343434342, 'epoch': 35.45}
{'eval_loss': 0.05082935467362404, 'eval_accuracy': 0.9835623159960746, 'eval_runtime': 27.1372, 'eval_samples_per_second': 150.2, 'eval_steps_per_second': 1.179, 'epoch': 35.61}
{'loss': 0.2297, 'learning_rate': 0.00014276094276094277, 'epoch': 35.76}
{'eval_loss': 0.05093111842870712, 'eval_accuracy': 0.9845436702649657, 'eval_runtime': 27.4321, 'eval_samples_per_second': 148.585, 'eval_steps_per_second': 1.167, 'epoch': 35.98}
{'loss': 0.2165, 'learning_rate': 0.0001420875420875421, 'epoch': 36.06}
{'loss': 0.2352, 'learning_rate': 0.0001414141414141414, 'epoch': 36.36}
{'eval_loss': 0.05007719621062279, 'eval_accuracy': 0.9842983316977428, 'eval_runtime': 27.0, 'eval_samples_per_second': 150.963, 'eval_steps_per_second': 1.185, 'epoch': 36.36}
{'loss': 0.2159, 'learning_rate': 0.00014074074074074076, 'epoch': 36.67}
{'eval_loss': 0.04954716935753822, 'eval_accuracy': 0.9833169774288518, 'eval_runtime': 27.4701, 'eval_samples_per_second': 148.38, 'eval_steps_per_second': 1.165, 'epoch': 36.74}
{'loss': 0.2189, 'learning_rate': 0.00014006734006734008, 'epoch': 36.97}
{'eval_loss': 0.05169549584388733, 'eval_accuracy': 0.9842983316977428, 'eval_runtime': 27.0735, 'eval_samples_per_second': 150.553, 'eval_steps_per_second': 1.182, 'epoch': 37.12}
{'loss': 0.2126, 'learning_rate': 0.0001393939393939394, 'epoch': 37.27}
{'eval_loss': 0.05080166831612587, 'eval_accuracy': 0.9840529931305201, 'eval_runtime': 27.4934, 'eval_samples_per_second': 148.254, 'eval_steps_per_second': 1.164, 'epoch': 37.5}
{'loss': 0.2066, 'learning_rate': 0.00013872053872053872, 'epoch': 37.58}
{'loss': 0.2113, 'learning_rate': 0.00013804713804713804, 'epoch': 37.88}
{'eval_loss': 0.05066005513072014, 'eval_accuracy': 0.9835623159960746, 'eval_runtime': 26.9119, 'eval_samples_per_second': 151.457, 'eval_steps_per_second': 1.189, 'epoch': 37.88}
{'loss': 0.208, 'learning_rate': 0.0001373737373737374, 'epoch': 38.18}
{'eval_loss': 0.05135362967848778, 'eval_accuracy': 0.9840529931305201, 'eval_runtime': 27.3302, 'eval_samples_per_second': 149.139, 'eval_steps_per_second': 1.171, 'epoch': 38.26}
{'loss': 0.2046, 'learning_rate': 0.0001367003367003367, 'epoch': 38.48}
{'eval_loss': 0.051343321800231934, 'eval_accuracy': 0.9845436702649657, 'eval_runtime': 27.0305, 'eval_samples_per_second': 150.793, 'eval_steps_per_second': 1.184, 'epoch': 38.64}
{'loss': 0.2202, 'learning_rate': 0.00013602693602693603, 'epoch': 38.79}
{'eval_loss': 0.050981294363737106, 'eval_accuracy': 0.9840529931305201, 'eval_runtime': 27.2319, 'eval_samples_per_second': 149.677, 'eval_steps_per_second': 1.175, 'epoch': 39.02}
{'loss': 0.2184, 'learning_rate': 0.00013535353535353538, 'epoch': 39.09}
{'loss': 0.2219, 'learning_rate': 0.0001346801346801347, 'epoch': 39.39}
{'eval_loss': 0.05143988877534866, 'eval_accuracy': 0.9840529931305201, 'eval_runtime': 27.0186, 'eval_samples_per_second': 150.859, 'eval_steps_per_second': 1.184, 'epoch': 39.39}
{'loss': 0.2026, 'learning_rate': 0.000134006734006734, 'epoch': 39.7}
{'eval_loss': 0.05108218640089035, 'eval_accuracy': 0.9840529931305201, 'eval_runtime': 27.2706, 'eval_samples_per_second': 149.465, 'eval_steps_per_second': 1.173, 'epoch': 39.77}
{'loss': 0.2073, 'learning_rate': 0.00013333333333333334, 'epoch': 40.0}
{'eval_loss': 0.048991456627845764, 'eval_accuracy': 0.9838076545632973, 'eval_runtime': 27.056, 'eval_samples_per_second': 150.65, 'eval_steps_per_second': 1.183, 'epoch': 40.15}
{'loss': 0.2134, 'learning_rate': 0.00013265993265993266, 'epoch': 40.3}
{'eval_loss': 0.049303729087114334, 'eval_accuracy': 0.9838076545632973, 'eval_runtime': 27.2848, 'eval_samples_per_second': 149.387, 'eval_steps_per_second': 1.173, 'epoch': 40.53}
{'loss': 0.2204, 'learning_rate': 0.00013198653198653198, 'epoch': 40.61}
{'loss': 0.2118, 'learning_rate': 0.00013131313131313133, 'epoch': 40.91}
{'eval_loss': 0.05000180006027222, 'eval_accuracy': 0.9840529931305201, 'eval_runtime': 27.1191, 'eval_samples_per_second': 150.3, 'eval_steps_per_second': 1.18, 'epoch': 40.91}
{'loss': 0.2168, 'learning_rate': 0.00013063973063973065, 'epoch': 41.21}
{'eval_loss': 0.050901588052511215, 'eval_accuracy': 0.9828263002944063, 'eval_runtime': 27.3031, 'eval_samples_per_second': 149.287, 'eval_steps_per_second': 1.172, 'epoch': 41.29}
{'loss': 0.206, 'learning_rate': 0.00012996632996632997, 'epoch': 41.52}
{'eval_loss': 0.05045361444354057, 'eval_accuracy': 0.9828263002944063, 'eval_runtime': 27.127, 'eval_samples_per_second': 150.256, 'eval_steps_per_second': 1.18, 'epoch': 41.67}
{'loss': 0.207, 'learning_rate': 0.00012929292929292932, 'epoch': 41.82}
{'eval_loss': 0.050206251442432404, 'eval_accuracy': 0.9847890088321885, 'eval_runtime': 27.3211, 'eval_samples_per_second': 149.189, 'eval_steps_per_second': 1.171, 'epoch': 42.05}
{'loss': 0.2077, 'learning_rate': 0.0001286195286195286, 'epoch': 42.12}
{'loss': 0.2103, 'learning_rate': 0.00012794612794612796, 'epoch': 42.42}
{'eval_loss': 0.04933127388358116, 'eval_accuracy': 0.9842983316977428, 'eval_runtime': 26.9627, 'eval_samples_per_second': 151.172, 'eval_steps_per_second': 1.187, 'epoch': 42.42}
{'loss': 0.2178, 'learning_rate': 0.00012727272727272728, 'epoch': 42.73}
{'eval_loss': 0.050693124532699585, 'eval_accuracy': 0.9845436702649657, 'eval_runtime': 27.3867, 'eval_samples_per_second': 148.831, 'eval_steps_per_second': 1.168, 'epoch': 42.8}
{'loss': 0.2117, 'learning_rate': 0.0001265993265993266, 'epoch': 43.03}
{'eval_loss': 0.05030355602502823, 'eval_accuracy': 0.9835623159960746, 'eval_runtime': 27.156, 'eval_samples_per_second': 150.096, 'eval_steps_per_second': 1.178, 'epoch': 43.18}
{'loss': 0.2171, 'learning_rate': 0.00012592592592592592, 'epoch': 43.33}
{'eval_loss': 0.049694906920194626, 'eval_accuracy': 0.9835623159960746, 'eval_runtime': 27.6178, 'eval_samples_per_second': 147.586, 'eval_steps_per_second': 1.159, 'epoch': 43.56}
{'loss': 0.2086, 'learning_rate': 0.00012525252525252527, 'epoch': 43.64}
{'loss': 0.2053, 'learning_rate': 0.0001245791245791246, 'epoch': 43.94}
{'eval_loss': 0.05021750554442406, 'eval_accuracy': 0.9840529931305201, 'eval_runtime': 27.2335, 'eval_samples_per_second': 149.668, 'eval_steps_per_second': 1.175, 'epoch': 43.94}
{'loss': 0.2056, 'learning_rate': 0.0001239057239057239, 'epoch': 44.24}
{'eval_loss': 0.05160753056406975, 'eval_accuracy': 0.9835623159960746, 'eval_runtime': 28.253, 'eval_samples_per_second': 144.268, 'eval_steps_per_second': 1.133, 'epoch': 44.32}
{'loss': 0.2104, 'learning_rate': 0.00012323232323232323, 'epoch': 44.55}
{'eval_loss': 0.04999841749668121, 'eval_accuracy': 0.9835623159960746, 'eval_runtime': 27.5355, 'eval_samples_per_second': 148.027, 'eval_steps_per_second': 1.162, 'epoch': 44.7}
{'loss': 0.218, 'learning_rate': 0.00012255892255892255, 'epoch': 44.85}
{'eval_loss': 0.04986029118299484, 'eval_accuracy': 0.9838076545632973, 'eval_runtime': 27.6261, 'eval_samples_per_second': 147.541, 'eval_steps_per_second': 1.158, 'epoch': 45.08}
{'loss': 0.2007, 'learning_rate': 0.00012188552188552189, 'epoch': 45.15}
{'loss': 0.2019, 'learning_rate': 0.00012121212121212122, 'epoch': 45.45}
{'eval_loss': 0.050881411880254745, 'eval_accuracy': 0.9840529931305201, 'eval_runtime': 27.173, 'eval_samples_per_second': 150.002, 'eval_steps_per_second': 1.178, 'epoch': 45.45}
{'loss': 0.2097, 'learning_rate': 0.00012053872053872056, 'epoch': 45.76}
{'eval_loss': 0.04982030391693115, 'eval_accuracy': 0.9845436702649657, 'eval_runtime': 27.4831, 'eval_samples_per_second': 148.309, 'eval_steps_per_second': 1.164, 'epoch': 45.83}
{'loss': 0.1992, 'learning_rate': 0.00011986531986531988, 'epoch': 46.06}
{'eval_loss': 0.05083701014518738, 'eval_accuracy': 0.9842983316977428, 'eval_runtime': 27.3308, 'eval_samples_per_second': 149.136, 'eval_steps_per_second': 1.171, 'epoch': 46.21}
{'loss': 0.2115, 'learning_rate': 0.00011919191919191919, 'epoch': 46.36}
{'eval_loss': 0.04977229982614517, 'eval_accuracy': 0.9842983316977428, 'eval_runtime': 27.5518, 'eval_samples_per_second': 147.94, 'eval_steps_per_second': 1.161, 'epoch': 46.59}
{'loss': 0.2033, 'learning_rate': 0.00011851851851851852, 'epoch': 46.67}
{'loss': 0.2024, 'learning_rate': 0.00011784511784511784, 'epoch': 46.97}
{'eval_loss': 0.050688184797763824, 'eval_accuracy': 0.9835623159960746, 'eval_runtime': 27.2982, 'eval_samples_per_second': 149.314, 'eval_steps_per_second': 1.172, 'epoch': 46.97}
{'loss': 0.2199, 'learning_rate': 0.00011717171717171717, 'epoch': 47.27}
{'eval_loss': 0.049056556075811386, 'eval_accuracy': 0.9838076545632973, 'eval_runtime': 27.5321, 'eval_samples_per_second': 148.045, 'eval_steps_per_second': 1.162, 'epoch': 47.35}
{'loss': 0.1914, 'learning_rate': 0.00011649831649831651, 'epoch': 47.58}
{'eval_loss': 0.05031416565179825, 'eval_accuracy': 0.9840529931305201, 'eval_runtime': 27.0845, 'eval_samples_per_second': 150.492, 'eval_steps_per_second': 1.181, 'epoch': 47.73}
{'loss': 0.2152, 'learning_rate': 0.00011582491582491583, 'epoch': 47.88}
{'eval_loss': 0.048825811594724655, 'eval_accuracy': 0.9847890088321885, 'eval_runtime': 27.742, 'eval_samples_per_second': 146.925, 'eval_steps_per_second': 1.153, 'epoch': 48.11}
{'loss': 0.2154, 'learning_rate': 0.00011515151515151516, 'epoch': 48.18}
{'loss': 0.1982, 'learning_rate': 0.00011447811447811447, 'epoch': 48.48}
{'eval_loss': 0.04894449934363365, 'eval_accuracy': 0.9842983316977428, 'eval_runtime': 27.1384, 'eval_samples_per_second': 150.193, 'eval_steps_per_second': 1.179, 'epoch': 48.48}
{'loss': 0.202, 'learning_rate': 0.0001138047138047138, 'epoch': 48.79}
{'eval_loss': 0.04839928075671196, 'eval_accuracy': 0.9838076545632973, 'eval_runtime': 27.4837, 'eval_samples_per_second': 148.306, 'eval_steps_per_second': 1.164, 'epoch': 48.86}
{'loss': 0.2161, 'learning_rate': 0.00011313131313131313, 'epoch': 49.09}
{'eval_loss': 0.049884114414453506, 'eval_accuracy': 0.9845436702649657, 'eval_runtime': 27.051, 'eval_samples_per_second': 150.678, 'eval_steps_per_second': 1.183, 'epoch': 49.24}
{'loss': 0.2034, 'learning_rate': 0.00011245791245791246, 'epoch': 49.39}
{'eval_loss': 0.05084117129445076, 'eval_accuracy': 0.9833169774288518, 'eval_runtime': 27.428, 'eval_samples_per_second': 148.607, 'eval_steps_per_second': 1.167, 'epoch': 49.62}
{'loss': 0.2096, 'learning_rate': 0.0001117845117845118, 'epoch': 49.7}
{'loss': 0.1985, 'learning_rate': 0.00011111111111111112, 'epoch': 50.0}
{'eval_loss': 0.04846213757991791, 'eval_accuracy': 0.9847890088321885, 'eval_runtime': 27.0925, 'eval_samples_per_second': 150.448, 'eval_steps_per_second': 1.181, 'epoch': 50.0}
{'loss': 0.2, 'learning_rate': 0.00011043771043771045, 'epoch': 50.3}
{'eval_loss': 0.05142826586961746, 'eval_accuracy': 0.9840529931305201, 'eval_runtime': 27.0581, 'eval_samples_per_second': 150.639, 'eval_steps_per_second': 1.183, 'epoch': 50.38}
{'loss': 0.2012, 'learning_rate': 0.00010976430976430979, 'epoch': 50.61}
{'eval_loss': 0.05079672113060951, 'eval_accuracy': 0.9838076545632973, 'eval_runtime': 27.5838, 'eval_samples_per_second': 147.768, 'eval_steps_per_second': 1.16, 'epoch': 50.76}
{'loss': 0.212, 'learning_rate': 0.00010909090909090909, 'epoch': 50.91}
{'eval_loss': 0.04920734092593193, 'eval_accuracy': 0.9833169774288518, 'eval_runtime': 27.2889, 'eval_samples_per_second': 149.365, 'eval_steps_per_second': 1.173, 'epoch': 51.14}
{'loss': 0.2042, 'learning_rate': 0.00010841750841750841, 'epoch': 51.21}
{'loss': 0.2057, 'learning_rate': 0.00010774410774410775, 'epoch': 51.52}
{'eval_loss': 0.04933134466409683, 'eval_accuracy': 0.9835623159960746, 'eval_runtime': 27.9584, 'eval_samples_per_second': 145.788, 'eval_steps_per_second': 1.145, 'epoch': 51.52}
{'loss': 0.2108, 'learning_rate': 0.00010707070707070708, 'epoch': 51.82}
{'eval_loss': 0.04937919229269028, 'eval_accuracy': 0.9847890088321885, 'eval_runtime': 27.2774, 'eval_samples_per_second': 149.428, 'eval_steps_per_second': 1.173, 'epoch': 51.89}
{'loss': 0.1956, 'learning_rate': 0.0001063973063973064, 'epoch': 52.12}
{'eval_loss': 0.04899673908948898, 'eval_accuracy': 0.9833169774288518, 'eval_runtime': 27.3778, 'eval_samples_per_second': 148.88, 'eval_steps_per_second': 1.169, 'epoch': 52.27}
{'loss': 0.2044, 'learning_rate': 0.00010572390572390574, 'epoch': 52.42}
{'eval_loss': 0.050773244351148605, 'eval_accuracy': 0.9842983316977428, 'eval_runtime': 27.2356, 'eval_samples_per_second': 149.657, 'eval_steps_per_second': 1.175, 'epoch': 52.65}
{'loss': 0.2033, 'learning_rate': 0.00010505050505050507, 'epoch': 52.73}
{'loss': 0.1977, 'learning_rate': 0.00010437710437710438, 'epoch': 53.03}
{'eval_loss': 0.050228018313646317, 'eval_accuracy': 0.9842983316977428, 'eval_runtime': 27.4882, 'eval_samples_per_second': 148.282, 'eval_steps_per_second': 1.164, 'epoch': 53.03}
{'loss': 0.204, 'learning_rate': 0.0001037037037037037, 'epoch': 53.33}
{'eval_loss': 0.05131624639034271, 'eval_accuracy': 0.9842983316977428, 'eval_runtime': 27.0423, 'eval_samples_per_second': 150.727, 'eval_steps_per_second': 1.183, 'epoch': 53.41}
{'loss': 0.2044, 'learning_rate': 0.00010303030303030303, 'epoch': 53.64}
{'eval_loss': 0.049657534807920456, 'eval_accuracy': 0.9850343473994112, 'eval_runtime': 27.5886, 'eval_samples_per_second': 147.742, 'eval_steps_per_second': 1.16, 'epoch': 53.79}
{'loss': 0.2059, 'learning_rate': 0.00010235690235690237, 'epoch': 53.94}
{'eval_loss': 0.0496680811047554, 'eval_accuracy': 0.9840529931305201, 'eval_runtime': 27.0233, 'eval_samples_per_second': 150.833, 'eval_steps_per_second': 1.184, 'epoch': 54.17}
{'loss': 0.1917, 'learning_rate': 0.00010168350168350169, 'epoch': 54.24}
{'loss': 0.1877, 'learning_rate': 0.00010101010101010102, 'epoch': 54.55}
{'eval_loss': 0.05028623342514038, 'eval_accuracy': 0.9842983316977428, 'eval_runtime': 27.5626, 'eval_samples_per_second': 147.882, 'eval_steps_per_second': 1.161, 'epoch': 54.55}
{'loss': 0.2035, 'learning_rate': 0.00010033670033670034, 'epoch': 54.85}
{'eval_loss': 0.04924190416932106, 'eval_accuracy': 0.9847890088321885, 'eval_runtime': 27.105, 'eval_samples_per_second': 150.378, 'eval_steps_per_second': 1.181, 'epoch': 54.92}
{'loss': 0.1993, 'learning_rate': 9.966329966329967e-05, 'epoch': 55.15}
{'eval_loss': 0.05023137852549553, 'eval_accuracy': 0.9850343473994112, 'eval_runtime': 27.3313, 'eval_samples_per_second': 149.133, 'eval_steps_per_second': 1.171, 'epoch': 55.3}
{'loss': 0.2089, 'learning_rate': 9.8989898989899e-05, 'epoch': 55.45}
{'eval_loss': 0.050037067383527756, 'eval_accuracy': 0.9840529931305201, 'eval_runtime': 27.0997, 'eval_samples_per_second': 150.407, 'eval_steps_per_second': 1.181, 'epoch': 55.68}
{'loss': 0.2149, 'learning_rate': 9.831649831649832e-05, 'epoch': 55.76}
{'loss': 0.1986, 'learning_rate': 9.764309764309764e-05, 'epoch': 56.06}
{'eval_loss': 0.04835348203778267, 'eval_accuracy': 0.9833169774288518, 'eval_runtime': 27.3972, 'eval_samples_per_second': 148.774, 'eval_steps_per_second': 1.168, 'epoch': 56.06}
{'loss': 0.1859, 'learning_rate': 9.696969696969698e-05, 'epoch': 56.36}
{'eval_loss': 0.05047842487692833, 'eval_accuracy': 0.9842983316977428, 'eval_runtime': 26.9889, 'eval_samples_per_second': 151.025, 'eval_steps_per_second': 1.186, 'epoch': 56.44}
{'loss': 0.2045, 'learning_rate': 9.62962962962963e-05, 'epoch': 56.67}
{'eval_loss': 0.04894755035638809, 'eval_accuracy': 0.9840529931305201, 'eval_runtime': 27.3732, 'eval_samples_per_second': 148.905, 'eval_steps_per_second': 1.169, 'epoch': 56.82}
{'loss': 0.2173, 'learning_rate': 9.562289562289563e-05, 'epoch': 56.97}
{'eval_loss': 0.05012134090065956, 'eval_accuracy': 0.9838076545632973, 'eval_runtime': 27.1197, 'eval_samples_per_second': 150.297, 'eval_steps_per_second': 1.18, 'epoch': 57.2}
{'train_runtime': 33933.4144, 'train_samples_per_second': 99.383, 'train_steps_per_second': 0.194, 'train_loss': 0.35492667381337145, 'epoch': 57.2}
{'test_loss': 0.028304360806941986, 'test_accuracy': 0.9899418864550737, 'test_runtime': 29.4146, 'test_samples_per_second': 152.101, 'test_steps_per_second': 1.19}
